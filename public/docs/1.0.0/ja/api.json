{
  "sections": [
    {
      "slug": "%E5%9F%BA%E6%9C%AC%E3%81%AE%E3%83%AA%E3%82%A2%E3%82%AF%E3%83%86%E3%82%A3%E3%83%93%E3%83%86%E3%82%A3",
      "title": "基本のリアクティビティ",
      "level": 1,
      "children": [
        {
          "slug": "createsignal",
          "title": "createSignal",
          "level": 2,
          "children": []
        },
        {
          "slug": "createeffect",
          "title": "createEffect",
          "level": 2,
          "children": []
        },
        {
          "slug": "creatememo",
          "title": "createMemo",
          "level": 2,
          "children": []
        },
        {
          "slug": "createresource",
          "title": "createResource",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "%E3%83%A9%E3%82%A4%E3%83%95%E3%82%B5%E3%82%A4%E3%82%AF%E3%83%AB",
      "title": "ライフサイクル",
      "level": 1,
      "children": [
        {
          "slug": "onmount",
          "title": "onMount",
          "level": 2,
          "children": []
        },
        {
          "slug": "oncleanup",
          "title": "onCleanup",
          "level": 2,
          "children": []
        },
        {
          "slug": "onerror",
          "title": "onError",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "%E3%83%AA%E3%82%A2%E3%82%AF%E3%83%86%E3%82%A3%E3%83%96%E3%81%AE%E3%83%A6%E3%83%BC%E3%83%86%E3%82%A3%E3%83%AA%E3%83%86%E3%82%A3",
      "title": "リアクティブのユーティリティ",
      "level": 1,
      "children": [
        {
          "slug": "untrack",
          "title": "untrack",
          "level": 2,
          "children": []
        },
        {
          "slug": "batch",
          "title": "batch",
          "level": 2,
          "children": []
        },
        {
          "slug": "on",
          "title": "on",
          "level": 2,
          "children": []
        },
        {
          "slug": "createroot",
          "title": "createRoot",
          "level": 2,
          "children": []
        },
        {
          "slug": "mergeprops",
          "title": "mergeProps",
          "level": 2,
          "children": []
        },
        {
          "slug": "splitprops",
          "title": "splitProps",
          "level": 2,
          "children": []
        },
        {
          "slug": "usetransition",
          "title": "useTransition",
          "level": 2,
          "children": []
        },
        {
          "slug": "observable",
          "title": "observable",
          "level": 2,
          "children": []
        },
        {
          "slug": "maparray",
          "title": "mapArray",
          "level": 2,
          "children": []
        },
        {
          "slug": "indexarray",
          "title": "indexArray",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "stores",
      "title": "Stores",
      "level": 1,
      "children": [
        {
          "slug": "createstore",
          "title": "createStore",
          "level": 2,
          "children": [
            {
              "slug": "%E3%82%B2%E3%83%83%E3%82%BF%E3%83%BC",
              "title": "ゲッター",
              "level": 3,
              "children": []
            },
            {
              "slug": "%E3%82%B9%E3%83%88%E3%82%A2%E3%81%AE%E6%9B%B4%E6%96%B0",
              "title": "ストアの更新",
              "level": 3,
              "children": []
            }
          ]
        },
        {
          "slug": "produce",
          "title": "produce",
          "level": 2,
          "children": []
        },
        {
          "slug": "reconcile",
          "title": "reconcile",
          "level": 2,
          "children": []
        },
        {
          "slug": "createmutable",
          "title": "createMutable",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88-api",
      "title": "コンポーネント API",
      "level": 1,
      "children": [
        {
          "slug": "createcontext",
          "title": "createContext",
          "level": 2,
          "children": []
        },
        {
          "slug": "usecontext",
          "title": "useContext",
          "level": 2,
          "children": []
        },
        {
          "slug": "children",
          "title": "children",
          "level": 2,
          "children": []
        },
        {
          "slug": "lazy",
          "title": "lazy",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "%E5%89%AF%E6%AC%A1%E7%9A%84%E3%81%AA%E3%83%97%E3%83%AA%E3%83%9F%E3%83%86%E3%82%A3%E3%83%96",
      "title": "副次的なプリミティブ",
      "level": 1,
      "children": [
        {
          "slug": "createdeferred",
          "title": "createDeferred",
          "level": 2,
          "children": []
        },
        {
          "slug": "createcomputed",
          "title": "createComputed",
          "level": 2,
          "children": []
        },
        {
          "slug": "createrendereffect",
          "title": "createRenderEffect",
          "level": 2,
          "children": []
        },
        {
          "slug": "createselector",
          "title": "createSelector",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "%E3%83%AC%E3%83%B3%E3%83%80%E3%83%AA%E3%83%B3%E3%82%B0",
      "title": "レンダリング",
      "level": 1,
      "children": [
        {
          "slug": "render",
          "title": "render",
          "level": 2,
          "children": []
        },
        {
          "slug": "hydrate",
          "title": "hydrate",
          "level": 2,
          "children": []
        },
        {
          "slug": "rendertostring",
          "title": "renderToString",
          "level": 2,
          "children": []
        },
        {
          "slug": "rendertostringasync",
          "title": "renderToStringAsync",
          "level": 2,
          "children": []
        },
        {
          "slug": "pipetonodewritable",
          "title": "pipeToNodeWritable",
          "level": 2,
          "children": []
        },
        {
          "slug": "pipetowritable",
          "title": "pipeToWritable",
          "level": 2,
          "children": []
        },
        {
          "slug": "isserver",
          "title": "isServer",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "%E5%88%B6%E5%BE%A1%E3%83%95%E3%83%AD%E3%83%BC",
      "title": "制御フロー",
      "level": 1,
      "children": [
        {
          "slug": "%3Cfor%3E",
          "title": "<For>",
          "level": 2,
          "children": []
        },
        {
          "slug": "%3Cshow%3E",
          "title": "<Show>",
          "level": 2,
          "children": []
        },
        {
          "slug": "%3Cswitch%3E%2F%3Cmatch%3E",
          "title": "<Switch>/<Match>",
          "level": 2,
          "children": []
        },
        {
          "slug": "%3Cindex%3E",
          "title": "<Index>",
          "level": 2,
          "children": []
        },
        {
          "slug": "%3Cerrorboundary%3E",
          "title": "<ErrorBoundary>",
          "level": 2,
          "children": []
        },
        {
          "slug": "%3Csuspense%3E",
          "title": "<Suspense>",
          "level": 2,
          "children": []
        },
        {
          "slug": "%3Csuspenselist%3E-(experimental)",
          "title": "<SuspenseList> (Experimental)",
          "level": 2,
          "children": []
        },
        {
          "slug": "%3Cdynamic%3E",
          "title": "<Dynamic>",
          "level": 2,
          "children": []
        },
        {
          "slug": "%3Cportal%3E",
          "title": "<Portal>",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "%E7%89%B9%E5%88%A5%E3%81%AA-jsx-%E5%B1%9E%E6%80%A7",
      "title": "特別な JSX 属性",
      "level": 1,
      "children": [
        {
          "slug": "ref",
          "title": "ref",
          "level": 2,
          "children": []
        },
        {
          "slug": "classlist",
          "title": "classList",
          "level": 2,
          "children": []
        },
        {
          "slug": "style",
          "title": "style",
          "level": 2,
          "children": []
        },
        {
          "slug": "innerhtml%2Ftextcontent",
          "title": "innerHTML/textContent",
          "level": 2,
          "children": []
        },
        {
          "slug": "on___",
          "title": "on___",
          "level": 2,
          "children": []
        },
        {
          "slug": "on%3A___%2Foncapture%3A___",
          "title": "on:___/oncapture:___",
          "level": 2,
          "children": []
        },
        {
          "slug": "use%3A___",
          "title": "use:___",
          "level": 2,
          "children": []
        },
        {
          "slug": "prop%3A___",
          "title": "prop:___",
          "level": 2,
          "children": []
        },
        {
          "slug": "attr%3A___",
          "title": "attr:___",
          "level": 2,
          "children": []
        },
        {
          "slug": "%2F*-%40once-*%2F",
          "title": "/* @once */",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "%E4%BB%96%E3%81%AE%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%81%A8%E3%81%AE%E6%AF%94%E8%BC%83",
      "title": "他のライブラリとの比較",
      "level": 1,
      "children": [
        {
          "slug": "react",
          "title": "React",
          "level": 2,
          "children": [
            {
              "slug": "%E7%A7%BB%E8%A1%8C%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E3%82%A2%E3%83%89%E3%83%90%E3%82%A4%E3%82%B9%3A",
              "title": "移行のためのアドバイス:",
              "level": 4,
              "children": []
            }
          ]
        },
        {
          "slug": "vue",
          "title": "Vue",
          "level": 2,
          "children": [
            {
              "slug": "%E7%A7%BB%E8%A1%8C%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E3%82%A2%E3%83%89%E3%83%90%E3%82%A4%E3%82%B9%3A-1",
              "title": "移行のためのアドバイス:",
              "level": 4,
              "children": []
            }
          ]
        },
        {
          "slug": "svelte",
          "title": "Svelte",
          "level": 2,
          "children": [
            {
              "slug": "%E7%A7%BB%E8%A1%8C%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E3%82%A2%E3%83%89%E3%83%90%E3%82%A4%E3%82%B9%3A-2",
              "title": "移行のためのアドバイス:",
              "level": 4,
              "children": []
            }
          ]
        },
        {
          "slug": "knockout.js",
          "title": "Knockout.js",
          "level": 2,
          "children": [
            {
              "slug": "%E7%A7%BB%E8%A1%8C%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E3%82%A2%E3%83%89%E3%83%90%E3%82%A4%E3%82%B9%3A-3",
              "title": "移行のためのアドバイス:",
              "level": 4,
              "children": []
            }
          ]
        },
        {
          "slug": "lit-%26-lighterhtml",
          "title": "Lit & LighterHTML",
          "level": 2,
          "children": [
            {
              "slug": "%E7%A7%BB%E8%A1%8C%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E3%82%A2%E3%83%89%E3%83%90%E3%82%A4%E3%82%B9%3A-4",
              "title": "移行のためのアドバイス:",
              "level": 4,
              "children": []
            }
          ]
        },
        {
          "slug": "s.js",
          "title": "S.js",
          "level": 2,
          "children": []
        },
        {
          "slug": "rxjs",
          "title": "RxJS",
          "level": 2,
          "children": []
        },
        {
          "slug": "others",
          "title": "Others",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "faq",
      "title": "FAQ",
      "level": 1,
      "children": []
    }
  ],
  "content": "<section class=\"mt-10\"><h1 id=\"%E5%9F%BA%E6%9C%AC%E3%81%AE%E3%83%AA%E3%82%A2%E3%82%AF%E3%83%86%E3%82%A3%E3%83%93%E3%83%86%E3%82%A3\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%9F%BA%E6%9C%AC%E3%81%AE%E3%83%AA%E3%82%A2%E3%82%AF%E3%83%86%E3%82%A3%E3%83%93%E3%83%86%E3%82%A3\">#</a> 基本のリアクティビティ</h1><h2 id=\"createsignal\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createsignal\">#</a> <code>createSignal</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">value</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#e36209\">name</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">; </span><span style=\"color:#e36209\">equals</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">false</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> ((</span><span style=\"color:#e36209\">prev</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">next</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">boolean</span><span style=\"color:#24292e\">) }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> [</span><span style=\"color:#e36209\">get</span><span style=\"color:#24292e\">: () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">set</span><span style=\"color:#24292e\">: (</span><span style=\"color:#e36209\">v</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">];</span></span>\n<span class=\"line\"></span></code></pre><p>これは時間の経過とともに変化する単一の値を追跡するために使用される、最も基本的なリアクティブプリミティブです。create 関数は Signal にアクセスしたり更新するための get と set のペアの関数を返します。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">getValue</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setValue</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(initialValue);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// 値の読み取り</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">getValue</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// 値の設定</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">setValue</span><span style=\"color:#24292e\">(nextValue);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// 関数の setter を使って値を設定</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">setValue</span><span style=\"color:#24292e\">((</span><span style=\"color:#e36209\">prev</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> prev </span><span style=\"color:#d73a49\">+</span><span style=\"color:#24292e\"> next);</span></span>\n<span class=\"line\"></span></code></pre><p>Signal を更新に反応させたい場合は、追跡スコープの下でアクセスすることを忘れないでください。追跡スコープは、<code>createEffect</code> や JSX 式などの計算に渡される関数です。</p><blockquote> <p>Signal に関数を格納したい場合は、関数の形式を使用する必要があります:</p> <pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6f42c1\">setValue</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> myFunction);</span></span>\n<span class=\"line\"></span></code></pre> </blockquote><h2 id=\"createeffect\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createeffect\">#</a> <code>createEffect</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createEffect</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">v</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">value</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#e36209\">name</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>依存関係を自動的に追跡し、それらが変更された各レンダリングの後に実行される新しい計算を作成します。<code>ref</code> を使用したり、他の副作用を管理するのに理想的です。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">a</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setA</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(initialValue);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// Signal `a` に依存する副作用</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">createEffect</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">doSideEffect</span><span style=\"color:#24292e\">(</span><span style=\"color:#6f42c1\">a</span><span style=\"color:#24292e\">()));</span></span>\n<span class=\"line\"></span></code></pre><p>effect 関数は、その effect 関数の前回実行時に返された値で呼び出されます。この値はオプションの第二引数として初期化できます。これは追加のクロージャを作成せずに差分を取る場合に便利です。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6f42c1\">createEffect</span><span style=\"color:#24292e\">((</span><span style=\"color:#e36209\">prev</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">sum</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">a</span><span style=\"color:#24292e\">() </span><span style=\"color:#d73a49\">+</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">b</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">if</span><span style=\"color:#24292e\"> (sum </span><span style=\"color:#d73a49\">!==</span><span style=\"color:#24292e\"> prev) console.</span><span style=\"color:#6f42c1\">log</span><span style=\"color:#24292e\">(sum);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> sum;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}, </span><span style=\"color:#005cc5\">0</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"creatememo\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#creatememo\">#</a> <code>createMemo</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createMemo</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">v</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">value</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#e36209\">name</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">; </span><span style=\"color:#e36209\">equals</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">false</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> ((</span><span style=\"color:#e36209\">prev</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">next</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">boolean</span><span style=\"color:#24292e\">) }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>実行されたコードの依存関係が更新されるたびに、値を再計算する読み取り専用の派生 Signal を作成します。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">getValue</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createMemo</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">computeExpensiveValue</span><span style=\"color:#24292e\">(</span><span style=\"color:#6f42c1\">a</span><span style=\"color:#24292e\">(), </span><span style=\"color:#6f42c1\">b</span><span style=\"color:#24292e\">()));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// 値の読み取り</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">getValue</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"></span></code></pre><p>memo 関数は、その memo 関数の前回実行時に返された値で呼び出されます。この値はオプションの第二引数として初期化できます。これは、計算量を減らすのに便利です。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">sum</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createMemo</span><span style=\"color:#24292e\">((</span><span style=\"color:#e36209\">prev</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">input</span><span style=\"color:#24292e\">() </span><span style=\"color:#d73a49\">+</span><span style=\"color:#24292e\"> prev, </span><span style=\"color:#005cc5\">0</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"createresource\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createresource\">#</a> <code>createResource</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">type</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">ResourceReturn</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt; </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> [</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    ()</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">undefined</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">loading</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">boolean</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">error</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#6f42c1\">mutate</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">v</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">undefined</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">undefined</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#6f42c1\">refetch</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createResource</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">true</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">fetcher</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">k</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">, </span><span style=\"color:#6f42c1\">getPrev</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">undefined</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Promise</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#e36209\">initialValue</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">; </span><span style=\"color:#e36209\">name</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">ResourceReturn</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createResource</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">source</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">false</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">null</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> (() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">false</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">null</span><span style=\"color:#24292e\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">fetcher</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">k</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">, </span><span style=\"color:#6f42c1\">getPrev</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">undefined</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Promise</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#e36209\">initialValue</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">; </span><span style=\"color:#e36209\">name</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">ResourceReturn</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"></span></code></pre><p>非同期のリクエストを管理できる Signal を作成します。<code>fetcher</code> は非同期関数で、<code>source</code> が提供されていればその戻り値を受け取り、Resource に設定された解決値を持つ Promise を返します。fetcher はリアクティブではないので、複数回実行させたい場合はオプションの第一引数を使用してください。source の解決値が false, null, undefined の場合は、フェッチしません。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">data</span><span style=\"color:#24292e\">, { </span><span style=\"color:#005cc5\">mutate</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">refetch</span><span style=\"color:#24292e\"> }] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createResource</span><span style=\"color:#24292e\">(getQuery, fetchData);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// 値の読み取り</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">data</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// 読み込み中か確認</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">data.loading;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// エラーが起きたか確認</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">data.error;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// プロミスを作成せずに直接値を設定</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">mutate</span><span style=\"color:#24292e\">(optimisticValue);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// ただ前回のリクエストを再取得</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">refetch</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"></span></code></pre><p><code>loading</code> や <code>error</code> はリアクティブなゲッターなので追跡できます。</p><h1 id=\"%E3%83%A9%E3%82%A4%E3%83%95%E3%82%B5%E3%82%A4%E3%82%AF%E3%83%AB\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E3%83%A9%E3%82%A4%E3%83%95%E3%82%B5%E3%82%A4%E3%82%AF%E3%83%AB\">#</a> ライフサイクル</h1><h2 id=\"onmount\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#onmount\">#</a> <code>onMount</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">onMount</span><span style=\"color:#24292e\">(</span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>初期レンダリングと要素がマウントされた後に実行されるメソッドを登録します。<code>ref</code> の使用や、その他の一度きりの副作用を管理するのに最適です。これは依存関係のない <code>createEffect</code> と同等です。</p><h2 id=\"oncleanup\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#oncleanup\">#</a> <code>onCleanup</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">onCleanup</span><span style=\"color:#24292e\">(</span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>現在のリアクティブスコープの廃棄または再計算時に実行されるクリーンアップメソッドを登録します。どんなコンポーネントや Effect でも使用できます。</p><h2 id=\"onerror\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#onerror\">#</a> <code>onError</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">onError</span><span style=\"color:#24292e\">(</span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">err</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>子スコープのエラー時に実行されるエラーハンドラメソッドを登録します。最も近いスコープのエラーハンドラーのみ実行されます。ラインをトリガーするために再スローします。</p><h1 id=\"%E3%83%AA%E3%82%A2%E3%82%AF%E3%83%86%E3%82%A3%E3%83%96%E3%81%AE%E3%83%A6%E3%83%BC%E3%83%86%E3%82%A3%E3%83%AA%E3%83%86%E3%82%A3\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E3%83%AA%E3%82%A2%E3%82%AF%E3%83%86%E3%82%A3%E3%83%96%E3%81%AE%E3%83%A6%E3%83%BC%E3%83%86%E3%82%A3%E3%83%AA%E3%83%86%E3%82%A3\">#</a> リアクティブのユーティリティ</h1><p>これらのヘルパーは、更新のスケジュールをより適切に設定し、リアクティビティの追跡方法を制御する機能を提供します。</p><h2 id=\"untrack\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#untrack\">#</a> <code>untrack</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">untrack</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>実行中のコードブロック内の依存関係の追跡を無視して、値を返します。</p><h2 id=\"batch\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#batch\">#</a> <code>batch</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">batch</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>不必要な再計算を防ぐために、ブロック内の更新を最後まで待ちます。これは、次の行の値を読んでもまだ更新されていないことを意味します。<a href=\"#createstore\">Solid Store</a> の set メソッドと Effect は、コードを自動的に batch でラップしています。</p><h2 id=\"on\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#on\">#</a> <code>on</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">on</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">extends</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Array</span><span style=\"color:#24292e\">&lt;() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">&gt; </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> (() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">), </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">deps</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">input</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">prevInput</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">prevValue</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#e36209\">defer</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">boolean</span><span style=\"color:#24292e\"> } </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> {}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">prevValue</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">undefined</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p><code>on</code> は、依存関係を明示的にするため計算に渡されるよう設計されています。依存関係の配列が渡される場合、<code>input</code> と <code>prevInput</code> は配列になります。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6f42c1\">createEffect</span><span style=\"color:#24292e\">(</span><span style=\"color:#6f42c1\">on</span><span style=\"color:#24292e\">(a, (</span><span style=\"color:#e36209\">v</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> console.</span><span style=\"color:#6f42c1\">log</span><span style=\"color:#24292e\">(v, </span><span style=\"color:#6f42c1\">b</span><span style=\"color:#24292e\">())));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// これと同等:</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">createEffect</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">v</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">a</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">untrack</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> console.</span><span style=\"color:#6f42c1\">log</span><span style=\"color:#24292e\">(v, </span><span style=\"color:#6f42c1\">b</span><span style=\"color:#24292e\">()));</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">});</span></span>\n<span class=\"line\"></span></code></pre><p>また、defer オプションを true に設定することで、すぐに計算を実行せず、変更があった場合にのみ計算を実行するように設定することもできます。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// すぐには実行されません</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">createEffect</span><span style=\"color:#24292e\">(</span><span style=\"color:#6f42c1\">on</span><span style=\"color:#24292e\">(a, (</span><span style=\"color:#e36209\">v</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> console.</span><span style=\"color:#6f42c1\">log</span><span style=\"color:#24292e\">(v), { defer: </span><span style=\"color:#005cc5\">true</span><span style=\"color:#24292e\"> }));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">setA</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;new&quot;</span><span style=\"color:#24292e\">); </span><span style=\"color:#6a737d\">// ここで実行される</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"createroot\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createroot\">#</a> <code>createRoot</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createRoot</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#6f42c1\">dispose</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>自動廃棄されない新しい非追跡型コンテキストを作成します。これは、親の再評価時に解放したくない、ネストされたリアクティブコンテキストなどに便利です。これは、キャッシュのための強力なパターンです。</p><p>すべての Solid のコードは、すべてのメモリ/計算が解放されることを保証するため、これらのいずれかのトップレベルでラップされる必要があります。通常は、すべての <code>render</code> エントリー関数に <code>createRoot</code> が組み込まれているので、これを気にする必要はありません。</p><h2 id=\"mergeprops\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#mergeprops\">#</a> <code>mergeProps</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">mergeProps</span><span style=\"color:#24292e\">(</span><span style=\"color:#d73a49\">...</span><span style=\"color:#e36209\">sources</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>リアクティブなオブジェクトの <code>merge</code> メソッドです。呼び出し元から提供されなかった場合のために、コンポーネントにデフォルトの props を設定するのに便利です。あるいは、リアクティブなプロパティを含む props オブジェクトを複製します。</p><p>このメソッドは、プロキシを使用してプロパティを逆順に解決することで動作します。これにより、prop オブジェクトが最初にマージされたときには存在しなかったプロパティを動的に追跡できます。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// デフォルト props</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">props </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">mergeProps</span><span style=\"color:#24292e\">({ name: </span><span style=\"color:#032f62\">&quot;Smith&quot;</span><span style=\"color:#24292e\"> }, props);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// props の複製</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">newProps </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">mergeProps</span><span style=\"color:#24292e\">(props);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// props のマージ</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">props </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">mergeProps</span><span style=\"color:#24292e\">(props, otherProps);</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"splitprops\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#splitprops\">#</a> <code>splitProps</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">splitProps</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">props</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">...</span><span style=\"color:#e36209\">keys</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Array</span><span style=\"color:#24292e\">&lt;(</span><span style=\"color:#d73a49\">keyof</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">)[]&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> [</span><span style=\"color:#d73a49\">...</span><span style=\"color:#e36209\">parts</span><span style=\"color:#24292e\">: </span><span style=\"color:#e36209\">Partial</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;];</span></span>\n<span class=\"line\"></span></code></pre><p>これは分割代入の代わりです。リアクティビティを維持しながら、リアクティブなオブジェクトをキーで分割します。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">local</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">others</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">splitProps</span><span style=\"color:#24292e\">(props, [</span><span style=\"color:#032f62\">&quot;children&quot;</span><span style=\"color:#24292e\">]);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&lt;&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">&lt;</span><span style=\"color:#24292e\">Child {</span><span style=\"color:#d73a49\">...</span><span style=\"color:#24292e\">others} </span><span style=\"color:#d73a49\">/&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#e36209\">div</span><span style=\"color:#24292e\">&gt;{local.children}</span><span style=\"color:#d73a49\">&lt;</span><span style=\"color:#24292e\">div</span><span style=\"color:#d73a49\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&lt;/&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"usetransition\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#usetransition\">#</a> <code>useTransition</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">useTransition</span><span style=\"color:#24292e\">()</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> [</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">boolean</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  (</span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">, </span><span style=\"color:#6f42c1\">cb</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">];</span></span>\n<span class=\"line\"></span></code></pre><p>すべての非同期処理が完了するまでコミットを延期するため、非同期更新をトランザクションで一括して行なうのに使用します。この機能は Suspense と連動しており、Suspense の境界下で読み込まれたリソースのみを追跡します。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">isPending</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">start</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">useTransition</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// トランジション中か確認</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">isPending</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// トランジションでラップ</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">start</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">setSignal</span><span style=\"color:#24292e\">(newValue), () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#6a737d\">/* トランジションが完了 */</span><span style=\"color:#24292e\">)</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"observable\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#observable\">#</a> <code>observable</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">observable</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span><span style=\"color:#6f42c1\">input</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Observable</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"></span></code></pre><p>このメソッドは Signal を受け取り、シンプルな Observable を生成します。お好みの Observable ライブラリから、通常は <code>from</code> 演算子を使って取り込みます。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> { from } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;rxjs&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">s</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">set</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(</span><span style=\"color:#005cc5\">0</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">obsv$</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">from</span><span style=\"color:#24292e\">(</span><span style=\"color:#6f42c1\">observable</span><span style=\"color:#24292e\">(s));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">obsv$.</span><span style=\"color:#6f42c1\">subscribe</span><span style=\"color:#24292e\">((</span><span style=\"color:#e36209\">v</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> console.</span><span style=\"color:#6f42c1\">log</span><span style=\"color:#24292e\">(v));</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"maparray\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#maparray\">#</a> <code>mapArray</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">mapArray</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">list</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">readonly</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">[],</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">mapFn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">v</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#6f42c1\">i</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">number</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">[];</span></span>\n<span class=\"line\"></span></code></pre><p>更新時の不要なマッピングを減らすために、各アイテムを参照によってキャッシュするリアクティブなマップヘルパーです。値ごとに一度だけマッピング関数を実行し、必要に応じて移動や削除を行います。index 引数は Signal です。map 関数自体は追跡しません。</p><p><code>&lt;For&gt;</code> 制御フローの基礎となるヘルパーです。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">mapped</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">mapArray</span><span style=\"color:#24292e\">(source, (</span><span style=\"color:#e36209\">model</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">name</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setName</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(model.name);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">description</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setDescription</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(model.description);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    id: model.id,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">get</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">name</span><span style=\"color:#24292e\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">name</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">get</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">description</span><span style=\"color:#24292e\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">description</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    setName,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    setDescription</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">});</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"indexarray\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#indexarray\">#</a> <code>indexArray</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">indexArray</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">list</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">readonly</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">[],</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">mapFn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#6f42c1\">v</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">i</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">number</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">[];</span></span>\n<span class=\"line\"></span></code></pre><p><code>mapArray</code> と似ていますが、index でマッピングする点が異なります。アイテムは Signal で、index は定数となります。</p><p><code>&lt;Index&gt;</code> 制御フローの基礎となるヘルパーです。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">mapped</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">indexArray</span><span style=\"color:#24292e\">(source, (</span><span style=\"color:#e36209\">model</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">get</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">id</span><span style=\"color:#24292e\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">model</span><span style=\"color:#24292e\">().id</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">get</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">firstInitial</span><span style=\"color:#24292e\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">model</span><span style=\"color:#24292e\">().firstName[</span><span style=\"color:#005cc5\">0</span><span style=\"color:#24292e\">];</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">get</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">fullName</span><span style=\"color:#24292e\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">`${</span><span style=\"color:#6f42c1\">model</span><span style=\"color:#032f62\">().</span><span style=\"color:#24292e\">firstName</span><span style=\"color:#032f62\">} ${</span><span style=\"color:#6f42c1\">model</span><span style=\"color:#032f62\">().</span><span style=\"color:#24292e\">lastName</span><span style=\"color:#032f62\">}`</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">});</span></span>\n<span class=\"line\"></span></code></pre><h1 id=\"stores\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#stores\">#</a> Stores</h1><p>これらの API は <code>solid-js/store</code> で公開されています。</p><h2 id=\"createstore\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createstore\">#</a> <code>createStore</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createStore</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">extends</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">StoreNode</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">state</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Store</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#e36209\">name</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> [</span><span style=\"color:#e36209\">get</span><span style=\"color:#24292e\">: </span><span style=\"color:#e36209\">Store</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;, </span><span style=\"color:#e36209\">set</span><span style=\"color:#24292e\">: </span><span style=\"color:#e36209\">SetStoreFunction</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;];</span></span>\n<span class=\"line\"></span></code></pre><p>これにより、プロキシとして Signals のツリーが作成され、ネストしたデータ構造の個々の値を個別に追跡できるようになります。create 関数は、読み取り専用のプロキシオブジェクトと、セッター関数を返します。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">state</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setState</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createStore</span><span style=\"color:#24292e\">(initialValue);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// 値の読み取り</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">state.someValue;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// 値の設定</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">setState</span><span style=\"color:#24292e\">({ merge: </span><span style=\"color:#032f62\">&quot;thisValue&quot;</span><span style=\"color:#24292e\"> });</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">setState</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;path&quot;</span><span style=\"color:#24292e\">, </span><span style=\"color:#032f62\">&quot;to&quot;</span><span style=\"color:#24292e\">, </span><span style=\"color:#032f62\">&quot;value&quot;</span><span style=\"color:#24292e\">, newValue);</span></span>\n<span class=\"line\"></span></code></pre><p>プロキシであるストア オブジェクトは、プロパティへのアクセスを追跡するだけです。そして、アクセスがあると、Stores は再帰的に、ネストされたデータに対してネストされた Store オブジェクトを生成します。しかし、これは配列とプレーン オブジェクトしかラップしません。クラスはラップされません。つまり、<code>Date</code>, <code>HTMLElement</code>, <code>Regexp</code>, <code>Map</code>, <code>Set</code> のようなものは、きめ細かく反応しないということです。さらに、トップレベルの状態オブジェクトは、そのプロパティにアクセスしなければ追跡できません。そのため、新しいキーやインデックスを追加しても更新のトリガーにはならないので、反復処理を行なうものに使用するのには適していません。そのため、状態オブジェクト自体を使用するのではなく、状態のキーにリストを置くようにしてください。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// list を状態オブジェクトのキーにする</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">state</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setState</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createStore</span><span style=\"color:#24292e\">({ list: [] });</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// 状態オブジェクトの `list` プロパティにアクセス</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&lt;</span><span style=\"color:#24292e\">For each</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.list}</span><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\">{</span><span style=\"color:#e36209\">item</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#6a737d\">/*...*/</span><span style=\"color:#24292e\">}</span><span style=\"color:#d73a49\">&lt;/</span><span style=\"color:#24292e\">For</span><span style=\"color:#d73a49\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><h3 id=\"%E3%82%B2%E3%83%83%E3%82%BF%E3%83%BC\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E3%82%B2%E3%83%83%E3%82%BF%E3%83%BC\">#</a> ゲッター</h3><p>Store オブジェクトは、計算した値を格納するためのゲッターをサポートしています。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">state</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setState</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createStore</span><span style=\"color:#24292e\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  user: {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    firstName: </span><span style=\"color:#032f62\">&quot;John&quot;</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    lastName: </span><span style=\"color:#032f62\">&quot;Smith&quot;</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">get</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">fullName</span><span style=\"color:#24292e\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">`${</span><span style=\"color:#005cc5\">this</span><span style=\"color:#032f62\">.</span><span style=\"color:#24292e\">firstName</span><span style=\"color:#032f62\">} ${</span><span style=\"color:#005cc5\">this</span><span style=\"color:#032f62\">.</span><span style=\"color:#24292e\">lastName</span><span style=\"color:#032f62\">}`</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">});</span></span>\n<span class=\"line\"></span></code></pre><p>これらは単純なゲッターなので、値をキャッシュしたい場合は Memo を使用する必要があります;</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">let</span><span style=\"color:#24292e\"> fullName;</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">state</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setState</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createStore</span><span style=\"color:#24292e\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  user: {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    firstName: </span><span style=\"color:#032f62\">&quot;John&quot;</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    lastName: </span><span style=\"color:#032f62\">&quot;Smith&quot;</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">get</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">fullName</span><span style=\"color:#24292e\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">fullName</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">});</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">fullName </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createMemo</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">`${</span><span style=\"color:#24292e\">state</span><span style=\"color:#032f62\">.</span><span style=\"color:#24292e\">firstName</span><span style=\"color:#032f62\">} ${</span><span style=\"color:#24292e\">state</span><span style=\"color:#032f62\">.</span><span style=\"color:#24292e\">lastName</span><span style=\"color:#032f62\">}`</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span></code></pre><h3 id=\"%E3%82%B9%E3%83%88%E3%82%A2%E3%81%AE%E6%9B%B4%E6%96%B0\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E3%82%B9%E3%83%88%E3%82%A2%E3%81%AE%E6%9B%B4%E6%96%B0\">#</a> ストアの更新</h3><p>変更は、以前の状態を渡して新しい状態または値を返す関数の形をとることができます。オブジェクトは常に浅くマージされます。ストアから値を削除するには、値を <code>undefined</code> に設定します。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">state</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setState</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createStore</span><span style=\"color:#24292e\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  firstName: </span><span style=\"color:#032f62\">&quot;John&quot;</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  lastName: </span><span style=\"color:#032f62\">&quot;Miller&quot;</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">setState</span><span style=\"color:#24292e\">({ firstName: </span><span style=\"color:#032f62\">&quot;Johnny&quot;</span><span style=\"color:#24292e\">, middleName: </span><span style=\"color:#032f62\">&quot;Lee&quot;</span><span style=\"color:#24292e\"> });</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// ({ firstName: &#39;Johnny&#39;, middleName: &#39;Lee&#39;, lastName: &#39;Miller&#39; })</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">setState</span><span style=\"color:#24292e\">((</span><span style=\"color:#e36209\">state</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> ({ preferredName: state.firstName, lastName: </span><span style=\"color:#032f62\">&quot;Milner&quot;</span><span style=\"color:#24292e\"> }));</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// ({ firstName: &#39;Johnny&#39;, preferredName: &#39;Johnny&#39;, middleName: &#39;Lee&#39;, lastName: &#39;Milner&#39; })</span></span>\n<span class=\"line\"></span></code></pre><p>キー配列、オブジェクトの範囲、およびフィルタ関数を含むパスをサポートしています。</p><p>setState は、変更へのパスを示すことができる、ネストされた設定もサポートしています。ネストされている場合、更新される状態は、オブジェクト以外の他の値である可能性があります。オブジェクトは引き続きマージされますが、その他の値（配列を含む）は置き換えられます。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">state</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setState</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createStore</span><span style=\"color:#24292e\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  counter: </span><span style=\"color:#005cc5\">2</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  list: [</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    { id: </span><span style=\"color:#005cc5\">23</span><span style=\"color:#24292e\">, title: </span><span style=\"color:#032f62\">&#39;Birds&#39;</span><span style=\"color:#24292e\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    { id: </span><span style=\"color:#005cc5\">27</span><span style=\"color:#24292e\">, title: </span><span style=\"color:#032f62\">&#39;Fish&#39;</span><span style=\"color:#24292e\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  ]</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">setState</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&#39;counter&#39;</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">c</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> c </span><span style=\"color:#d73a49\">+</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">1</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">setState</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&#39;list&#39;</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">l</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> [</span><span style=\"color:#d73a49\">...</span><span style=\"color:#24292e\">l, {id: </span><span style=\"color:#005cc5\">43</span><span style=\"color:#24292e\">, title: </span><span style=\"color:#032f62\">&#39;Marsupials&#39;</span><span style=\"color:#24292e\">}]);</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">setState</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&#39;list&#39;</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">2</span><span style=\"color:#24292e\">, </span><span style=\"color:#032f62\">&#39;read&#39;</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">true</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// {</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//   counter: 3,</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//   list: [</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//     { id: 23, title: &#39;Birds&#39; }</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//     { id: 27, title: &#39;Fish&#39; }</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//     { id: 43, title: &#39;Marsupials&#39;, read: true }</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//   ]</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// }</span></span>\n<span class=\"line\"></span></code></pre><p>パスは、文字列キー、キーの配列、反復オブジェクト ({from, to, by})、またはフィルタ関数です。これにより、状態の変化を表す表現力が飛躍的に向上します。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">state</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setState</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createStore</span><span style=\"color:#24292e\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  todos: [</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    { task: </span><span style=\"color:#032f62\">&#39;Finish work&#39;</span><span style=\"color:#24292e\">, completed: </span><span style=\"color:#005cc5\">false</span><span style=\"color:#24292e\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    { task: </span><span style=\"color:#032f62\">&#39;Go grocery shopping&#39;</span><span style=\"color:#24292e\">, completed: </span><span style=\"color:#005cc5\">false</span><span style=\"color:#24292e\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    { task: </span><span style=\"color:#032f62\">&#39;Make dinner&#39;</span><span style=\"color:#24292e\">, completed: </span><span style=\"color:#005cc5\">false</span><span style=\"color:#24292e\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  ]</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">setState</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&#39;todos&#39;</span><span style=\"color:#24292e\">, [</span><span style=\"color:#005cc5\">0</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">2</span><span style=\"color:#24292e\">], </span><span style=\"color:#032f62\">&#39;completed&#39;</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">true</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// {</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//   todos: [</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//     { task: &#39;Finish work&#39;, completed: true }</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//     { task: &#39;Go grocery shopping&#39;, completed: false }</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//     { task: &#39;Make dinner&#39;, completed: true }</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//   ]</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">setState</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&#39;todos&#39;</span><span style=\"color:#24292e\">, { from: </span><span style=\"color:#005cc5\">0</span><span style=\"color:#24292e\">, to: </span><span style=\"color:#005cc5\">1</span><span style=\"color:#24292e\"> }, </span><span style=\"color:#032f62\">&#39;completed&#39;</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">c</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">!</span><span style=\"color:#24292e\">c);</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// {</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//   todos: [</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//     { task: &#39;Finish work&#39;, completed: false }</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//     { task: &#39;Go grocery shopping&#39;, completed: true }</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//     { task: &#39;Make dinner&#39;, completed: true }</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//   ]</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">setState</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&#39;todos&#39;</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">todo</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> todo.completed, </span><span style=\"color:#032f62\">&#39;task&#39;</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">t</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> t </span><span style=\"color:#d73a49\">+</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&#39;!&#39;</span><span style=\"color:#24292e\">)</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// {</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//   todos: [</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//     { task: &#39;Finish work&#39;, completed: false }</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//     { task: &#39;Go grocery shopping!&#39;, completed: true }</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//     { task: &#39;Make dinner!&#39;, completed: true }</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//   ]</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">setState</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&#39;todos&#39;</span><span style=\"color:#24292e\">, {}, </span><span style=\"color:#e36209\">todo</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> ({ marked: </span><span style=\"color:#005cc5\">true</span><span style=\"color:#24292e\">, completed: </span><span style=\"color:#d73a49\">!</span><span style=\"color:#24292e\">todo.completed }))</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// {</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//   todos: [</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//     { task: &#39;Finish work&#39;, completed: true, marked: true }</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//     { task: &#39;Go grocery shopping!&#39;, completed: false, marked: true }</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//     { task: &#39;Make dinner!&#39;, completed: false, marked: true }</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//   ]</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// }</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"produce\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#produce\">#</a> <code>produce</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">produce</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">state</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">state</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">extends</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">NotWrappable</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">?</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Store</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">extends</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">NotWrappable</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">?</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Store</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"></span></code></pre><p>Immer にインスパイアされた Solid の Store オブジェクト用の API で、局所的なミューテーション変異を可能にします。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6f42c1\">setState</span><span style=\"color:#24292e\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">produce</span><span style=\"color:#24292e\">((</span><span style=\"color:#e36209\">s</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    s.user.name </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;Frank&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    s.list.</span><span style=\"color:#6f42c1\">push</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;Pencil Crayon&quot;</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  })</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"reconcile\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#reconcile\">#</a> <code>reconcile</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">reconcile</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">value</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Store</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">key</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">null</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">merge</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">boolean</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  } </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> { key: </span><span style=\"color:#032f62\">&quot;id&quot;</span><span style=\"color:#24292e\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">state</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">extends</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">NotWrappable</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">?</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Store</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">extends</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">NotWrappable</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">?</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Store</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"></span></code></pre><p>きめ細かい更新を適用できない場合に、データの変化を差分で表示します。ストアからの不変的なデータや、大きな API レスポンスを扱う場合に便利です。</p><p>アイテムをマッチさせるために、キーがあればそれを使用します。デフォルトでは、<code>merge</code> false は、可能な限り参照チェックを行って同等性を判断し、アイテムが参照的に等しくない場合には置換します。<code>merge</code> true は、すべての差分を葉ノードにプッシュし、以前のデータを新しい値に効果的に変換します。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// observable の購読</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">unsubscribe</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> store.</span><span style=\"color:#6f42c1\">subscribe</span><span style=\"color:#24292e\">(({ </span><span style=\"color:#e36209\">todos</span><span style=\"color:#24292e\"> }) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">setState</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&#39;todos&#39;</span><span style=\"color:#24292e\">, </span><span style=\"color:#6f42c1\">reconcile</span><span style=\"color:#24292e\">(todos)));</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">onCleanup</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">unsubscribe</span><span style=\"color:#24292e\">());</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"createmutable\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createmutable\">#</a> <code>createMutable</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createMutable</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">extends</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">StoreNode</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">state</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Store</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#e36209\">name</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Store</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt; {</span></span>\n<span class=\"line\"></span></code></pre><p>ミュータブルな Store プロキシオブジェクトを新規に作成します。ストアは、値が変化したときにのみ更新をトリガーします。追跡は、プロパティアクセスをインターセプトすることで行われ、プロキシ経由で深いネストを自動的に追跡します。</p><p>外部システムとの統合や、MobX/Vue との互換性レイヤーとしても有効です。</p><blockquote> <p><strong>注意:</strong> ミュータブルな状態は、どこにでも渡したり変更が可能なので、追跡が困難になり、単方向フローを壊しやすくなったりします。一般的には、代わりに <code>createStore</code> を使用することをお勧めします。<code>produce</code> 修飾子を使用すると、多くの同じメリットがありますが、デメリットはありません。</p> </blockquote><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">state</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createMutable</span><span style=\"color:#24292e\">(initialValue);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// 値の読み取り</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">state.someValue;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// 値の設定</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">state.someValue </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">5</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">state.list.</span><span style=\"color:#6f42c1\">push</span><span style=\"color:#24292e\">(anotherValue);</span></span>\n<span class=\"line\"></span></code></pre><p>Mutable はゲッターだけでなくセッターもサポートしています。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">user</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createMutable</span><span style=\"color:#24292e\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  firstName: </span><span style=\"color:#032f62\">&quot;John&quot;</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  lastName: </span><span style=\"color:#032f62\">&quot;Smith&quot;</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">get</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">fullName</span><span style=\"color:#24292e\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">`${</span><span style=\"color:#005cc5\">this</span><span style=\"color:#032f62\">.</span><span style=\"color:#24292e\">firstName</span><span style=\"color:#032f62\">} ${</span><span style=\"color:#005cc5\">this</span><span style=\"color:#032f62\">.</span><span style=\"color:#24292e\">lastName</span><span style=\"color:#032f62\">}`</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">set</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">fullName</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">value</span><span style=\"color:#24292e\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    [</span><span style=\"color:#005cc5\">this</span><span style=\"color:#24292e\">.firstName, </span><span style=\"color:#005cc5\">this</span><span style=\"color:#24292e\">.lastName] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> value.</span><span style=\"color:#6f42c1\">split</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot; &quot;</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">});</span></span>\n<span class=\"line\"></span></code></pre><h1 id=\"%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88-api\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88-api\">#</a> コンポーネント API</h1><h2 id=\"createcontext\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createcontext\">#</a> <code>createContext</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">interface</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Context</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt; {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">id</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">symbol</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">Provider</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#e36209\">value</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">; </span><span style=\"color:#e36209\">children</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\"> }) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">defaultValue</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createContext</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span><span style=\"color:#e36209\">defaultValue</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Context</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">undefined</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"></span></code></pre><p>コンテキストは、Solid での依存性注入の方式を提供します。これは、中間コンポーネントを介してデータを props として渡す必要がないようにするために使用されます。</p><p>この関数は、<code>useContext</code> で使用できる新しいコンテキストオブジェクトを作成し、<code>Provider</code> 制御フローを提供します。階層構造の上位に <code>Provider</code> が見つからない場合には、デフォルトのコンテキストが使用されます。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">CounterContext</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createContext</span><span style=\"color:#24292e\">([{ count: </span><span style=\"color:#005cc5\">0</span><span style=\"color:#24292e\"> }, {}]);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">CounterProvider</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">state</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setState</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createStore</span><span style=\"color:#24292e\">({ count: props.count </span><span style=\"color:#d73a49\">||</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">0</span><span style=\"color:#24292e\"> });</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">store</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> [</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    state,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#6f42c1\">increment</span><span style=\"color:#24292e\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        </span><span style=\"color:#6f42c1\">setState</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;count&quot;</span><span style=\"color:#24292e\">, (</span><span style=\"color:#e36209\">c</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> c </span><span style=\"color:#d73a49\">+</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">1</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#6f42c1\">decrement</span><span style=\"color:#24292e\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        </span><span style=\"color:#6f42c1\">setState</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;count&quot;</span><span style=\"color:#24292e\">, (</span><span style=\"color:#e36209\">c</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> c </span><span style=\"color:#d73a49\">-</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">1</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  ];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">&lt;</span><span style=\"color:#24292e\">CounterContext.Provider value</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{store}</span><span style=\"color:#d73a49\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      {</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">children</span><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">&lt;/</span><span style=\"color:#24292e\">CounterContext.Provider</span><span style=\"color:#d73a49\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  );</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span></code></pre><p>Provider に渡された値は、そのまま <code>useContext</code> に渡されます。つまり、リアクティブな式としてのラッピングは機能しません。Signal や Store は、JSX でアクセスするのではなく、直接渡すべきです。</p><h2 id=\"usecontext\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#usecontext\">#</a> <code>useContext</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">useContext</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span><span style=\"color:#e36209\">context</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Context</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>コンテキストを取得するために使用され、各 Component 関数にプロップを渡すことなく、props を深く渡すことができます。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">state</span><span style=\"color:#24292e\">, { </span><span style=\"color:#005cc5\">increment</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">decrement</span><span style=\"color:#24292e\"> }] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">useContext</span><span style=\"color:#24292e\">(CounterContext);</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"children\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#children\">#</a> <code>children</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">children</span><span style=\"color:#24292e\">(</span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p><code>props.children</code> とのやりとりを容易にするために使用します。このヘルパーは、ネストされたリアクティビティを解決し、Memo を返します。JSX に直接渡す以外の方法で <code>props.children</code> を使用する際に推奨されるアプローチです。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">list</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">children</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> props.children);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// それらを使って何かする</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">createEffect</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">list</span><span style=\"color:#24292e\">());</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"lazy\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#lazy\">#</a> <code>lazy</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">lazy</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">extends</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Component</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">&gt;&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Promise</span><span style=\"color:#24292e\">&lt;{ </span><span style=\"color:#e36209\">default</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> }&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">&amp;</span><span style=\"color:#24292e\"> { </span><span style=\"color:#6f42c1\">preload</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Promise</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt; };</span></span>\n<span class=\"line\"></span></code></pre><p>コードの分割を可能にするため、コンポーネントを遅延ロードするのに使用されます。コンポーネントはレンダリングされるまでロードされません。遅延ロードされたコンポーネントは、静的にインポートされたものと同じように、props などを受け取って使用できます。遅延コンポーネントは <code>&lt;Suspense&gt;</code> をトリガーします。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// import をラップ</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">ComponentA</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">lazy</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;./ComponentA&quot;</span><span style=\"color:#24292e\">));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// JSX で使用</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&lt;</span><span style=\"color:#24292e\">ComponentA title</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{props.title} </span><span style=\"color:#d73a49\">/&gt;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><h1 id=\"%E5%89%AF%E6%AC%A1%E7%9A%84%E3%81%AA%E3%83%97%E3%83%AA%E3%83%9F%E3%83%86%E3%82%A3%E3%83%96\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%89%AF%E6%AC%A1%E7%9A%84%E3%81%AA%E3%83%97%E3%83%AA%E3%83%9F%E3%83%86%E3%82%A3%E3%83%96\">#</a> 副次的なプリミティブ</h1><p>おそらく初めてのアプリには必要ないでしょうが、あると便利なツールです。</p><h2 id=\"createdeferred\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createdeferred\">#</a> <code>createDeferred</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createDeferred</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">source</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">timeoutMs</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">number</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">name</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">equals</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">false</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> ((</span><span style=\"color:#e36209\">prev</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">next</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">boolean</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>ブラウザがアイドル状態のときにダウンストリームの変更のみを通知する読み取り専用の変数を作成します。<code>timeoutMs</code> は、強制的に更新を行なうまでの最大待機時間です。</p><h2 id=\"createcomputed\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createcomputed\">#</a> <code>createComputed</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createComputed</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">v</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">value</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#e36209\">name</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>依存関係を自動的に追跡し、レンダリングの直前に実行する新しい計算を作成します。これは他のリアクティブプリミティブに書き込むために使用します。更新の途中で Signal に書き込むと、他の計算で再計算が必要になることがあるので、可能であれば代わりに <code>createMemo</code> を使用してください。</p><h2 id=\"createrendereffect\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createrendereffect\">#</a> <code>createRenderEffect</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createRenderEffect</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">v</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">value</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#e36209\">name</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>依存関係を自動的に追跡する新しい計算を作成し、DOM 要素が作成および更新されるが必ずしも結合されていないレンダリングフェーズで実行します。すべての内部 DOM の更新はこの時点で行われます。</p><h2 id=\"createselector\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createselector\">#</a> <code>createSelector</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSelector</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">source</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">a</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">b</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">boolean</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#e36209\">name</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">k</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">boolean</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>値と一致するキーが入った、または出たときにのみサブスクライバに通知する条件付き Signal を作成します。委任された選択状態に便利です。演算が O(n) ではなく O(2) になるため。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">isSelected</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSelector</span><span style=\"color:#24292e\">(selectedId);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&lt;</span><span style=\"color:#24292e\">For each</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{</span><span style=\"color:#6f42c1\">list</span><span style=\"color:#24292e\">()}</span><span style=\"color:#d73a49\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  {(</span><span style=\"color:#e36209\">item</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#e36209\">li</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">classList</span><span style=\"color:#24292e\">={{ </span><span style=\"color:#e36209\">active</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">isSelected</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">item</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">id</span><span style=\"color:#24292e\">) }}&gt;{item.name}</span><span style=\"color:#d73a49\">&lt;/</span><span style=\"color:#24292e\">li</span><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&lt;/</span><span style=\"color:#24292e\">For</span><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><h1 id=\"%E3%83%AC%E3%83%B3%E3%83%80%E3%83%AA%E3%83%B3%E3%82%B0\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E3%83%AC%E3%83%B3%E3%83%80%E3%83%AA%E3%83%B3%E3%82%B0\">#</a> レンダリング</h1><p>これらのインポートは <code>solid-js/web</code> から公開されています。</p><h2 id=\"render\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#render\">#</a> <code>render</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">render</span><span style=\"color:#24292e\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">code</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">element</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">MountableElement</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>これは、ブラウザアプリのエントリーポイントです。トップレベルのコンポーネント定義または関数と、マウントする要素を指定します。返された dispose 関数がすべての子を消去するので、この element は空にすることをお勧めします。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">dispose</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">render</span><span style=\"color:#24292e\">(App, document.</span><span style=\"color:#6f42c1\">getElementById</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;app&quot;</span><span style=\"color:#24292e\">));</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"hydrate\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#hydrate\">#</a> <code>hydrate</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">hydrate</span><span style=\"color:#24292e\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">node</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">MountableElement</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>このメソッドは <code>render</code> と似ていますが、すでに DOM にレンダリングされているものを再利用しようとする点が異なります。ブラウザでの初期化時には、ページはすでにサーバーでレンダリングされています。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">dispose</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">hydrate</span><span style=\"color:#24292e\">(App, document.</span><span style=\"color:#6f42c1\">getElementById</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;app&quot;</span><span style=\"color:#24292e\">));</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"rendertostring\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#rendertostring\">#</a> <code>renderToString</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">renderToString</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">eventNames</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">[];</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">nonce</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>文字列に同期的にレンダリングします。この関数は、プログレッシブハイドレーション用のスクリプトタグも生成します。オプションには、ページがロードされてハイドレーションの再生前に購読する eventNames と、スクリプトタグに付ける nonce があります。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">html</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">renderToString</span><span style=\"color:#24292e\">(App);</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"rendertostringasync\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#rendertostringasync\">#</a> <code>renderToStringAsync</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">renderToStringAsync</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">eventNames</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">[];</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">timeoutMs</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">number</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">nonce</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Promise</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"></span></code></pre><p>結果を返す前に、すべての <code>&lt;Suspense&gt;</code> 境界が解決するのを待つという点を除いて、<code>renderToString</code> と同じです。リソースデータは自動的にスクリプトタグにシリアライズされ、クライアントのロード時にハイドレーションされます。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">html</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">await</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">renderToStringAsync</span><span style=\"color:#24292e\">(App);</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"pipetonodewritable\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#pipetonodewritable\">#</a> <code>pipeToNodeWritable</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">type</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">PipeToWritableResults</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">startWriting</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">write</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">v</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">abort</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">pipeToNodeWritable</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">writable</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#6f42c1\">write</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">v</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\"> },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">eventNames</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">[];</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">nonce</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">noScript</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">boolean</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#6f42c1\">onReady</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">r</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">PipeToWritableResults</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#6f42c1\">onComplete</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">r</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">PipeToWritableResults</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Promise</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>このメソッドは、Node のストリームにレンダリングします。Suspense のフォールバックプレースホルダーを含むコンテンツを同期的にレンダリングし、完了すると任意の非同期リソースからデータをストリームし続けます。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6f42c1\">pipeToNodeWritable</span><span style=\"color:#24292e\">(App, res);</span></span>\n<span class=\"line\"></span></code></pre><p><code>onReady</code> オプションは、コアアプリのレンダリング前後にストリームに書き込む際に便利です。<code>onReady</code> を使用する場合は、手動で <code>startWriting</code> を呼び出すことを忘れないでください。</p><h2 id=\"pipetowritable\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#pipetowritable\">#</a> <code>pipeToWritable</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">type</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">PipeToWritableResults</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">write</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">v</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">abort</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">script</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">pipeToWritable</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">writable</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">WritableStream</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">eventNames</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">[];</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">nonce</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">noScript</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">boolean</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#6f42c1\">onReady</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#e36209\">writable</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#6f42c1\">write</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">v</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\"> },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#e36209\">r</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">PipeToWritableResults</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    ) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#6f42c1\">onComplete</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#e36209\">writable</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#6f42c1\">write</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">v</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\"> },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#e36209\">r</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">PipeToWritableResults</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    ) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>このメソッドは、Web ストリームにレンダリングします。Suspense のフォールバックプレースホルダーを含むコンテンツを同期的にレンダリングし、完了すると任意の非同期リソースからデータをストリームし続けます。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> { </span><span style=\"color:#005cc5\">readable</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">writable</span><span style=\"color:#24292e\"> } </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">new</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">TransformStream</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">pipeToWritable</span><span style=\"color:#24292e\">(App, writable);</span></span>\n<span class=\"line\"></span></code></pre><p><code>onReady</code> オプションは、コアアプリのレンダリング前後にストリームに書き込む際に便利です。<code>onReady</code> を使用する場合は、手動で <code>startWriting</code> を呼び出すことを忘れないでください。</p><h2 id=\"isserver\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#isserver\">#</a> <code>isServer</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">isServer</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">boolean</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>これは、コードがサーバーまたはブラウザのバンドルとして実行されていることを示します。基礎となるランタイムがこの値を定数のブール値としてエクスポートするため、バンドラーはコードとその使用されるインポートをそれぞれのバンドルから取り除くことができます。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">if</span><span style=\"color:#24292e\"> (isServer) {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6a737d\">// 私はブラウザバンドルには入れません</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">} </span><span style=\"color:#d73a49\">else</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6a737d\">// サーバーでは実行されません;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span></code></pre><h1 id=\"%E5%88%B6%E5%BE%A1%E3%83%95%E3%83%AD%E3%83%BC\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%88%B6%E5%BE%A1%E3%83%95%E3%83%AD%E3%83%BC\">#</a> 制御フロー</h1><p>Solid では制御フローにコンポーネントを使用しています。その理由は、リアクティビティのパフォーマンスを向上させるためには、要素の生成方法を制御する必要があるからです。例えばリストの場合、単純な <code>map</code> では、常にすべてをマッピングしてしまい、非効率です。これはヘルパー関数を意味します。</p><p>これらをコンポーネントでラップすることで、簡潔なテンプレートを作成するのに便利ですし、ユーザーが独自の制御フローを構成・構築することもできます。</p><p>これらの組み込み制御フローは自動的にインポートされます。<code>Portal</code> と <code>Dynamic</code> 以外のすべては <code>solid-js</code> からエクスポートされます。DOM に特化したこれらの 2 つは、<code>solid-js/web</code> からエクスポートされます。</p><blockquote> <p>注意: 制御フローのコールバック/レンダー関数の子はすべて追跡されません。これにより、状態をネストして作成でき、反応をよりよく分離できます。</p> </blockquote><h2 id=\"%3Cfor%3E\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%3Cfor%3E\">#</a> <code>&lt;For&gt;</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">For</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">extends</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">&gt;(</span><span style=\"color:#e36209\">props</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">each</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">readonly</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">[];</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">fallback</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">children</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">item</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#6f42c1\">index</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">number</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">})</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">[];</span></span>\n<span class=\"line\"></span></code></pre><p>シンプルな参照キー付きループ制御フローです。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">For</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">each</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.list} </span><span style=\"color:#005cc5\">fallback</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;Loading...&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  {(</span><span style=\"color:#e36209\">item</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{item}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">For</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><p>オプションの第二引数はインデックスの Signal です:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">For</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">each</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.list} </span><span style=\"color:#005cc5\">fallback</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;Loading...&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  {(</span><span style=\"color:#e36209\">item</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">index</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      #{</span><span style=\"color:#6f42c1\">index</span><span style=\"color:#24292e\">()} {item}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  )}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">For</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"%3Cshow%3E\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%3Cshow%3E\">#</a> <code>&lt;Show&gt;</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Show</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span><span style=\"color:#e36209\">props</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">when</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">undefined</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">null</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">false</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">fallback</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">children</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> ((</span><span style=\"color:#e36209\">item</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">})</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>Show 制御フローは、ビューの一部を条件付きでレンダリングするために使用されます。これは三項演算子（<code>a ? b : c</code>）に似ていますが、JSX のテンプレート化に最適です。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">Show</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">when</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.count </span><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">0</span><span style=\"color:#24292e\">} </span><span style=\"color:#005cc5\">fallback</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;Loading...&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;My Content&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">Show</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><p>Show は、ブロックを特定のデータモデルにキーイングする方法としても使用できます。例: ユーザーモデルが置き換えられるたびに、この関数が再実行されます。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">Show</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">when</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.user} </span><span style=\"color:#005cc5\">fallback</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;Loading...&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  {(</span><span style=\"color:#e36209\">user</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{user.firstName}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">Show</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"%3Cswitch%3E%2F%3Cmatch%3E\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%3Cswitch%3E%2F%3Cmatch%3E\">#</a> <code>&lt;Switch&gt;</code>/<code>&lt;Match&gt;</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Switch</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">props</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">fallback</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">children</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">})</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">type</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">MatchProps</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt; </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">when</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">undefined</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">null</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">false</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">children</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> ((</span><span style=\"color:#e36209\">item</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Match</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span><span style=\"color:#e36209\">props</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">MatchProps</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;);</span></span>\n<span class=\"line\"></span></code></pre><p>互いに排他的な条件が 2 つ以上ある場合に便利です。単純なルーティングなどにも利用できます。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">Switch</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">fallback</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;Not Found&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">Match</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">when</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.route </span><span style=\"color:#d73a49\">===</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;home&quot;</span><span style=\"color:#24292e\">}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">Home</span><span style=\"color:#24292e\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;/</span><span style=\"color:#22863a\">Match</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">Match</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">when</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.route </span><span style=\"color:#d73a49\">===</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;settings&quot;</span><span style=\"color:#24292e\">}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">Settings</span><span style=\"color:#24292e\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;/</span><span style=\"color:#22863a\">Match</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">Switch</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><p>Match は、キー付きフローとして機能する関数の子もサポートしています。</p><h2 id=\"%3Cindex%3E\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%3Cindex%3E\">#</a> <code>&lt;Index&gt;</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Index</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">extends</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">&gt;(</span><span style=\"color:#e36209\">props</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">each</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">readonly</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">[];</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">fallback</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">children</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#6f42c1\">item</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">index</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">number</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">})</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">[];</span></span>\n<span class=\"line\"></span></code></pre><p>キーを持たないリストの反復（インデックスをキーとする行）。これは、データがプリミティブで構成されていて、値ではなくインデックスが固定されている場合など、概念的なキーが存在しない場合に便利です。</p><p>item は Signal です:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">Index</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">each</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.list} </span><span style=\"color:#005cc5\">fallback</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;Loading...&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  {(</span><span style=\"color:#e36209\">item</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{</span><span style=\"color:#6f42c1\">item</span><span style=\"color:#24292e\">()}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">Index</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><p>オプションの第二引数はインデックスです:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">Index</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">each</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.list} </span><span style=\"color:#005cc5\">fallback</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;Loading...&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  {(</span><span style=\"color:#e36209\">item</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">index</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      #{index} {</span><span style=\"color:#6f42c1\">item</span><span style=\"color:#24292e\">()}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  )}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">Index</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"%3Cerrorboundary%3E\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%3Cerrorboundary%3E\">#</a> <code>&lt;ErrorBoundary&gt;</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">ErrorBoundary</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">props</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">fallback</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> ((</span><span style=\"color:#e36209\">err</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">, </span><span style=\"color:#6f42c1\">reset</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">children</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">})</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>キャッチされなかったエラーを捕捉し、フォールバックコンテンツをレンダリングします。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">ErrorBoundary</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">fallback</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;Something went terribly wrong&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">MyComp</span><span style=\"color:#24292e\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">ErrorBoundary</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><p>また、エラーとリセット関数を渡すコールバック方式もサポートしています。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">ErrorBoundary</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#005cc5\">fallback</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{(</span><span style=\"color:#e36209\">err</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">reset</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">onClick</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{reset}&gt;Error: {err.</span><span style=\"color:#6f42c1\">toString</span><span style=\"color:#24292e\">()}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">MyComp</span><span style=\"color:#24292e\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">ErrorBoundary</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"%3Csuspense%3E\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%3Csuspense%3E\">#</a> <code>&lt;Suspense&gt;</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Suspense</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">props</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">fallback</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">children</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">})</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>その下で読み込まれたすべてのリソースを追跡し、それらが解決されるまでフォールバックのプレースホルダー状態を表示するコンポーネントです。<code>Suspense</code> が <code>Show</code> と異なる点は、ノンブロッキングであることです。つまり、現在 DOM に存在しなくても、両方のブランチが同時に存在します。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">Suspense</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">fallback</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;Loading...&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">AsyncComponent</span><span style=\"color:#24292e\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">Suspense</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"%3Csuspenselist%3E-(experimental)\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%3Csuspenselist%3E-(experimental)\">#</a> <code>&lt;SuspenseList&gt;</code> (Experimental)</h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">SuspenseList</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">props</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">children</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">revealOrder</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;forwards&quot;</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;backwards&quot;</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;together&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">tail</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;collapsed&quot;</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;hidden&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">})</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p><code>SuspenseList</code> では、複数の並列した <code>Suspense</code> と <code>SuspenseList</code> コンポーネントを調整できます。コンテンツの表示順を制御してレイアウトの乱れを抑え、フォールバックの状態を折りたたんだり非表示にするオプションも備えています。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">SuspenseList</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">revealOrder</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;forwards&quot;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">tail</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;collapsed&quot;</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">ProfileDetails</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">user</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{resource.user} /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">Suspense</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">fallback</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{&lt;</span><span style=\"color:#22863a\">h2</span><span style=\"color:#24292e\">&gt;Loading posts...&lt;/</span><span style=\"color:#22863a\">h2</span><span style=\"color:#24292e\">&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">ProfileTimeline</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">posts</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{resource.posts} /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;/</span><span style=\"color:#22863a\">Suspense</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">Suspense</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">fallback</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{&lt;</span><span style=\"color:#22863a\">h2</span><span style=\"color:#24292e\">&gt;Loading fun facts...&lt;/</span><span style=\"color:#22863a\">h2</span><span style=\"color:#24292e\">&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">ProfileTrivia</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">trivia</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{resource.trivia} /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;/</span><span style=\"color:#22863a\">Suspense</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">SuspenseList</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><p>SuspenseList はまだ実験的なもので、SSR を完全にはサポートしていません。</p><h2 id=\"%3Cdynamic%3E\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%3Cdynamic%3E\">#</a> <code>&lt;Dynamic&gt;</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Dynamic</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">props</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">&amp;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">children</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">component</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Component</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt; </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">keyof</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">IntrinsicElements</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>このコンポーネントでは、任意のコンポーネントやタグを挿入し、その props を渡すことができます。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">Dynamic</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">component</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.component} </span><span style=\"color:#005cc5\">someProp</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.something} /&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"%3Cportal%3E\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%3Cportal%3E\">#</a> <code>&lt;Portal&gt;</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Portal</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">props</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">mount</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Node</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">useShadow</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">boolean</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">isSVG</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">boolean</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">children</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">})</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Text</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>これにより、要素がマウントノードに挿入されます。ページレイアウトの外側にモーダルを挿入するのに便利です。イベントはコンポーネント階層を伝搬します。</p><p>ターゲットがドキュメントヘッドでない限り、ポータルは <code>&lt;div&gt;</code> の中にマウントされます。<code>useShadow</code> はスタイルを分離するためにシャドウルートに要素を配置し、SVG 要素に挿入する場合は、<code>&lt;div&gt;</code> が挿入されないように、<code>isSVG</code> が必要です。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">Portal</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">mount</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{document.</span><span style=\"color:#6f42c1\">getElementById</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;modal&quot;</span><span style=\"color:#24292e\">)}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;My Content&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">Portal</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><h1 id=\"%E7%89%B9%E5%88%A5%E3%81%AA-jsx-%E5%B1%9E%E6%80%A7\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E7%89%B9%E5%88%A5%E3%81%AA-jsx-%E5%B1%9E%E6%80%A7\">#</a> 特別な JSX 属性</h1><p>一般的に、Solid は DOM の規則に忠実であろうとします。ほとんどの props は、ネイティブ要素の属性や Web Components のプロパティとして扱われますが、いくつかの props には特別な動作があります。</p><p>TypeScript でカスタムの名前空間付き属性を使用するには、Solid の JSX 名前空間を拡張する必要があります:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">declare</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">module</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;solid-js&quot;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">namespace</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">interface</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Directives</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#6a737d\">// use:____</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">interface</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">ExplicitProperties</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#6a737d\">// prop:____</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">interface</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">ExplicitAttributes</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#6a737d\">// attr:____</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">interface</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">CustomEvents</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#6a737d\">// on:____</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">interface</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">CustomCaptureEvents</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#6a737d\">// oncapture:____</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"ref\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#ref\">#</a> <code>ref</code></h2><p>ref は、JSX の中で基礎となる DOM 要素にアクセスするための手段です。確かに、要素を変数に割り当てることもできますが、JSX のフローの中にコンポーネントを残しておく方が最適です。ref は、要素が DOM に結合される前のレンダリング時に割り当てられます。ref には 2 つの種類があります。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// 単純な代入</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">let</span><span style=\"color:#24292e\"> myDiv;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// onMount または createEffect を使って、DOM に結合された後に読み取り</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">onMount</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> console.</span><span style=\"color:#6f42c1\">log</span><span style=\"color:#24292e\">(myDiv));</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&lt;</span><span style=\"color:#24292e\">div ref</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{myDiv} </span><span style=\"color:#d73a49\">/&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// もしくは、コールバック関数（DOM に結合する前に呼び出されます）</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&lt;</span><span style=\"color:#24292e\">div ref</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{</span><span style=\"color:#e36209\">el</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> console.</span><span style=\"color:#6f42c1\">log</span><span style=\"color:#24292e\">(el)} </span><span style=\"color:#d73a49\">/&gt;</span></span>\n<span class=\"line\"></span></code></pre><p>ref はコンポーネントにも使用できます。ただし、相手側に取り付ける必要があります。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">MyComp</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">ref</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{props.ref} /&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">App</span><span style=\"color:#24292e\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">let</span><span style=\"color:#24292e\"> myDiv;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">onMount</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> console.</span><span style=\"color:#6f42c1\">log</span><span style=\"color:#24292e\">(myDiv.clientWidth));</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">MyComp</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">ref</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{myDiv} /&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"classlist\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#classlist\">#</a> <code>classList</code></h2><p><code>element.classList.toggle</code> を利用したヘルパーです。クラス名をキーにしたオブジェクトを受け取り、解決した値が true の時にクラス名を割り当てます。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">div</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#005cc5\">classList</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{{ active: state.active, editing: state.currentId </span><span style=\"color:#d73a49\">===</span><span style=\"color:#24292e\"> row.id }}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">/&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"style\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#style\">#</a> <code>style</code></h2><p>Solid の style ヘルパーは、文字列とオブジェクトのどちらでも動作します。React のそれとは異なり、Solid は内部で <code>element.style.setProperty</code> を使用しています。これは、CSS 変数をサポートすることを意味しますが、同時にプロパティの小文字のダッシュケースを使用することを意味します。これは実際にパフォーマンスの向上と SSR 出力の一貫性につながります。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// 文字列</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">style</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{</span><span style=\"color:#032f62\">`color: green; background-color: ${</span><span style=\"color:#24292e\">state</span><span style=\"color:#032f62\">.</span><span style=\"color:#24292e\">color</span><span style=\"color:#032f62\">}; height: ${</span><span style=\"color:#24292e\">state</span><span style=\"color:#032f62\">.</span><span style=\"color:#24292e\">height</span><span style=\"color:#032f62\">}px`</span><span style=\"color:#24292e\">} /&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// オブジェクト</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">style</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{{</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  color: </span><span style=\"color:#032f62\">&quot;green&quot;</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#032f62\">&quot;background-color&quot;</span><span style=\"color:#24292e\">: state.color,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  height: state.height </span><span style=\"color:#d73a49\">+</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;px&quot;</span><span style=\"color:#24292e\"> }}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">/&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// CSS 変数</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">style</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{{ </span><span style=\"color:#032f62\">&quot;--my-custom-color&quot;</span><span style=\"color:#24292e\">: state.themeColor }} /&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"innerhtml%2Ftextcontent\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#innerhtml%2Ftextcontent\">#</a> <code>innerHTML</code>/<code>textContent</code></h2><p>これらは、同等のプロパティと同じように動作します。文字列を設定すると、これらが設定されます。<strong>注意!!</strong> 悪意のある攻撃のベクトルとなる可能性があるため、エンドユーザーに公開される可能性のあるデータは <code>innerHTML</code> を使用してください。<code>textContent</code> は一般的には必要ありませんが、一般的な差分ルーチンをバイパスするため、子がテキストのみであることがわかっている場合には、実際にはパフォーマンスの最適化になります。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">textContent</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.text} /&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"on___\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#on___\">#</a> <code>on___</code></h2><p>Solid のイベントハンドラは、スタイルに応じて、通常、<code>onclick</code> または <code>onClick</code> の形式をとります。イベント名は常に小文字で表記されます。Solid では、合成されてバブルが発生する一般的な UI イベントに対して、半合成のイベントデリゲーションを使用しています。これにより、これらの共通イベントのパフォーマンスが向上します。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">onClick</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{(</span><span style=\"color:#e36209\">e</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> console.</span><span style=\"color:#6f42c1\">log</span><span style=\"color:#24292e\">(e.currentTarget)} /&gt;</span></span>\n<span class=\"line\"></span></code></pre><p>Solid は、イベントハンドラの第一引数に値をバインドするために、イベントハンドラに配列を渡すこともサポートしています。これは <code>bind</code> を使用せず、追加のクロージャも作成しないため、イベントのデリゲーション方法として高度に最適化されています。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">handler</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">itemId</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">e</span><span style=\"color:#24292e\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6a737d\">/*...*/</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">ul</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">For</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">each</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.list}&gt;{(</span><span style=\"color:#e36209\">item</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">li</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">onClick</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{[handler, item.id]} /&gt;}&lt;/</span><span style=\"color:#22863a\">For</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">ul</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"></span></code></pre><p>イベントは再バインドさせることができず、バインディングはリアクティブではありません。その理由は、一般的にリスナーをアタッチ/デタッチする方がコストがかかるからです。イベントは自然に呼び出されるので、リアクティブにする必要はなく、必要に応じてハンドラーをショートカットするだけです。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// 定義されている場合は呼び出し、そうでない場合は呼び出さない</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">onClick</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> props.</span><span style=\"color:#6f42c1\">handleClick</span><span style=\"color:#24292e\">?.()} /&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"on%3A___%2Foncapture%3A___\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#on%3A___%2Foncapture%3A___\">#</a> <code>on:___</code>/<code>oncapture:___</code></h2><p>その他のイベント、例えば変わった名前のイベントや、デリゲートしたくないイベントには、<code>on</code> 名前空間イベントがあります。これは単に、イベントリスナーをそのまま追加するだけです。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">on</span><span style=\"color:#24292e\">:</span><span style=\"color:#005cc5\">Weird-Event</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{(</span><span style=\"color:#e36209\">e</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">alert</span><span style=\"color:#24292e\">(e.detail)} /&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"use%3A___\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#use%3A___\">#</a> <code>use:___</code></h2><p>これらはカスタムディレクティブです。ある意味では ref のシンタックスシュガーに過ぎませんが、1 つの要素に複数のディレクティブを簡単に付けることができます．ディレクティブは、次のようなシグネチャを持つ関数に過ぎません:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">directive</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">element</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">, </span><span style=\"color:#6f42c1\">accessor</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>ディレクティブ関数は、DOM に追加される前のレンダリング時に呼び出されます。Signal や Effect の作成、クリーンアップの登録など、やりたいことは何でもできます。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">name</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setName</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;&quot;</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">model</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">el</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">value</span><span style=\"color:#24292e\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">field</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setField</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">value</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">createRenderEffect</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> (el.value </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">field</span><span style=\"color:#24292e\">()));</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  el.</span><span style=\"color:#6f42c1\">addEventListener</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;input&quot;</span><span style=\"color:#24292e\">, (</span><span style=\"color:#e36209\">e</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">setField</span><span style=\"color:#24292e\">(e.target.value));</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&lt;</span><span style=\"color:#24292e\">input type</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;text&quot;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">use</span><span style=\"color:#24292e\">:model</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{[name, setName]} /&gt;;</span></span>\n<span class=\"line\"></span></code></pre><p>TypeScript で登録するには、JSX 名前空間を拡張します。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">declare</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">module</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;solid-js&quot;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">namespace</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">interface</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Directives</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#e36209\">model</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> [() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">, (</span><span style=\"color:#e36209\">v</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">];</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"prop%3A___\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#prop%3A___\">#</a> <code>prop:___</code></h2><p>props を属性ではなくプロパティとして処理するように強制します。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">prop</span><span style=\"color:#24292e\">:</span><span style=\"color:#005cc5\">scrollTop</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{props.scrollPos </span><span style=\"color:#d73a49\">+</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;px&quot;</span><span style=\"color:#24292e\">} /&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"attr%3A___\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#attr%3A___\">#</a> <code>attr:___</code></h2><p>props をプロパティではなく属性として処理するように強制します。属性を設定する Web コンポーネントに便利です。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">my-element</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">attr</span><span style=\"color:#24292e\">:</span><span style=\"color:#005cc5\">status</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{props.status} /&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"%2F*-%40once-*%2F\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%2F*-%40once-*%2F\">#</a> <code>/* @once */</code></h2><p>Solid のコンパイラは、JSX 式のリアクティブなラッピングと遅延評価にシンプルなヒューリスティックを使用しています。関数の呼び出し、プロパティへのアクセス、または JSX が含まれていますか？ そうであれば、コンポーネントに渡される場合はゲッターでラップし、ネイティブ要素に渡される場合は Effect でラップします。</p><p>これを知っていれば、JSX の外からアクセスするだけで、変更されないことがわかっているもののオーバーヘッドを減らすことができます。単純な変数がラップされることはありません。また、式の最初にコメントデコレータ <code>/* @once */</code> を付けることで、ラップしないようにコンパイラに指示できます。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">MyComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">static</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{</span><span style=\"color:#6a737d\">/*@once*/</span><span style=\"color:#24292e\"> state.wontUpdate} /&gt;</span></span>\n<span class=\"line\"></span></code></pre><p>これは、子に対しても有効です。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">MyComponent</span><span style=\"color:#24292e\">&gt;{</span><span style=\"color:#6a737d\">/*@once*/</span><span style=\"color:#24292e\"> state.wontUpdate}&lt;/</span><span style=\"color:#22863a\">MyComponent</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre></section><section class=\"mt-10\"><h1 id=\"%E4%BB%96%E3%81%AE%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%81%A8%E3%81%AE%E6%AF%94%E8%BC%83\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E4%BB%96%E3%81%AE%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%81%A8%E3%81%AE%E6%AF%94%E8%BC%83\">#</a> 他のライブラリとの比較</h1><p>このセクションでは、多少の偏りは避けられませんが、Solid のソリューションが他のライブラリと比較してどのような位置にあるかを理解することが重要だと思っています。これはパフォーマンスの話ではありません。パフォーマンスについての決定的な情報は、<a href=\"https://github.com/krausest/js-framework-benchmark\">JS Framework Benchmark</a> をご覧ください。</p><h2 id=\"react\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#react\">#</a> React</h2><p>React は Solid に大きな影響を与えました。React の単方向フローや、Hooks API における読み取りと書き込みの明示的な分離は、Solid の API に影響を与えました。フレームワークではなく、単なる「レンダリングライブラリ」であるという目的以上のものです。Solid は、アプリケーション開発におけるデータ管理のアプローチ方法について強い意見を持っていますが、その実行を制約しようとはしません。</p><p>しかし、Solid は React の設計思想に沿うものであると同時に、根本的に異なる仕組みを持っています。React は仮想 DOM を使用し、Solid は使用しません。React の抽象化はトップダウンのコンポーネント分割で、レンダリングメソッドが繰り返し呼び出され、差分が発生します。一方 Solid は、各テンプレートを一度だけ全体的にレンダリングし、リアクティブグラフを構築した後、細かな変更に関連する命令を実行します。</p><h4 id=\"%E7%A7%BB%E8%A1%8C%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E3%82%A2%E3%83%89%E3%83%90%E3%82%A4%E3%82%B9%3A\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E7%A7%BB%E8%A1%8C%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E3%82%A2%E3%83%89%E3%83%90%E3%82%A4%E3%82%B9%3A\">#</a> 移行のためのアドバイス:</h4><p>Solid の更新モデルは、React や、React + MobX とは全く異なります。関数コンポーネントを <code>render</code> 関数と考えるのではなく、<code>constructor</code> と考えてください。分割代入や初期のプロパティアクセスはリアクティビティを失うことに注意してください。Solid のプリミティブにはフックルールのような制限がないので、自由にネストできます。また、リストの行に明示的なキーがなくても、「キー付き」の動作が可能です。最後に、仮想 DOM が存在しないので、<code>React.Children</code> や <code>React.cloneElement</code> のような仮想 DOM の命令的 API は意味を持ちません。これらを宣言的に使用する問題を解決する別の方法を見つけることをお勧めします。</p><h2 id=\"vue\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#vue\">#</a> Vue</h2><p>Solid は設計面では Vue の影響を特に受けていませんが、アプローチとしては同等です。どちらもリアクティブなシステムでプロキシを使用し、読み取りベースの自動追跡を行っています。しかし、似ているのはそこまでです。Vue の細かい依存関係の検出は、より細かい仮想 DOM とコンポーネントシステムに供給されるだけですが、Solid は DOM を直接更新することでその粒度を維持しています。</p><p>Vue は簡単さを重視し、Solid は透明性を重視しています。Vue 3 での Vue の新しい方向性は、Solid のアプローチとより一致しています。これらのライブラリが今後どのように進化していくかによって、時間が経てばもっと一致するかもしれません。</p><h4 id=\"%E7%A7%BB%E8%A1%8C%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E3%82%A2%E3%83%89%E3%83%90%E3%82%A4%E3%82%B9%3A-1\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E7%A7%BB%E8%A1%8C%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E3%82%A2%E3%83%89%E3%83%90%E3%82%A4%E3%82%B9%3A-1\">#</a> 移行のためのアドバイス:</h4><p>もう 1 つの最新リアクティブライブラリである Vue 3 からの移行は、なじみ深いものになるでしょう。Solid のコンポーネントは、Vue の <code>setup</code> 関数の最後にテンプレートをタグ付けするのとよく似ています。状態の派生を計算でオーバーラッピングすることに注意して、関数を試してみてください。リアクティビティが広く行き渡っています。Solid のプロキシは意図的に読み取り専用となっています。試す前にこきおろすのはやめましょう。</p><h2 id=\"svelte\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#svelte\">#</a> Svelte</h2><p>Svelte は、Solid もある程度採用しているプリコンパイルされた消えるフレームワークの先駆者です。どちらのライブラリも真にリアクティブであり、非常に小さな実行コードバンドルを生成できますが、小さなデモでは Svelte が勝っています。Solid は、宣言の際により多くの明示性を要求し、コンパイラによる暗黙の分析への依存度を下げていますが、これが Solid の優れたパフォーマンスの一因となっています。また、Solid はランタイムに多くの情報を保持しているため、大規模なアプリケーションでの拡張性に優れています。Solid の RealWorld デモの実装は、Svelte の実装よりも 25％ 小さいです。</p><p>どちらのライブラリも開発者がより少ないコードを書けるようにすることを目的としていますが、そのアプローチは全く異なります。Svelte 3 は、局所的な変化への対応を容易にするための最適化に焦点を当てており、プレーンなオブジェクトインタラクションと双方向バインディングに重点を置いています。対して Solid は、CQRS と不変のインターフェイスを意図的に採用することで、データフローに焦点を当てています。Svelte のテンプレート構文は間違いなく簡潔ですが、Solid では機能的なテンプレート構成により、多くの場合、Svelte よりも少ないコードで開発を行うことができます。</p><h4 id=\"%E7%A7%BB%E8%A1%8C%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E3%82%A2%E3%83%89%E3%83%90%E3%82%A4%E3%82%B9%3A-2\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E7%A7%BB%E8%A1%8C%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E3%82%A2%E3%83%89%E3%83%90%E3%82%A4%E3%82%B9%3A-2\">#</a> 移行のためのアドバイス:</h4><p>開発者体験は、いくつかの点で類似していますが、それは非常に異なる経験です。Solid のコンポーネントは安価なので、数を増やすことをためらう必要はありません。</p><h2 id=\"knockout.js\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#knockout.js\">#</a> Knockout.js</h2><p>このライブラリは、Knockout のおかげで成り立っています。細かい依存関係の検出のために、Knockout のモデルを近代化することが、このプロジェクトの動機でした。Knockout は 2010 年にリリースされ、Microsoft Explorer を IE6 までサポートしていますが、Solid の多くは IE をまったくサポートしていません。</p><p>Knockout のバインディングは、ランタイムに読み込まれる HTML の文字列に過ぎません。これらのバインディングは、クローンのコンテキスト（$parent など）に依存します。一方、Solid はテンプレートに JSX やタグ付きテンプレートリテラルを使用し、JavaScript の API を選択しています。</p><p>最大の違いは、Solid が変更をバッチ処理することで同期性を確保しているのに対し、Knockout は deferUpdates で遅延マイクロタスクキューを使用していることでしょう。</p><h4 id=\"%E7%A7%BB%E8%A1%8C%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E3%82%A2%E3%83%89%E3%83%90%E3%82%A4%E3%82%B9%3A-3\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E7%A7%BB%E8%A1%8C%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E3%82%A2%E3%83%89%E3%83%90%E3%82%A4%E3%82%B9%3A-3\">#</a> 移行のためのアドバイス:</h4><p>Knockout に慣れている人には、Solid のプリミティブは奇妙に見えるかもしれません。読み取り/書き込みの分離は意図的なもので、ただ人生を困難にするためではありません。State/Action (Flux) メンタルモデルの採用を検討してください。これらのライブラリは似ているように見えますが、異なるベストプラクティスを推進しています。</p><h2 id=\"lit-%26-lighterhtml\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#lit-%26-lighterhtml\">#</a> Lit &amp; LighterHTML</h2><p>これらのライブラリは非常に似ており、Solid にも影響を与えています。ほとんどの場合、Solid のコンパイルされたコードは、DOM の初期レンダリングを実行するために非常に似た方法を使用しています。テンプレート要素を複製したりコメントプレースホルダーの使用は、Solid とこれらのライブラリに共通するものです。</p><p>最大の違いは、これらのライブラリが仮想 DOM を使用していない一方で、レンダリングをトップダウンで同じように扱い、正常な状態を維持するためコンポーネント分割を必要とすることです。これに対して Solid は、きめ細かなリアクティブグラフを使って、変更された部分だけを更新し、最初のレンダリングでのみこの手法を共有しています。このアプローチは、ネイティブ DOM ならではの初期速度を利用しており、更新に対しても最もパフォーマンスの高いアプローチとなっています。</p><h4 id=\"%E7%A7%BB%E8%A1%8C%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E3%82%A2%E3%83%89%E3%83%90%E3%82%A4%E3%82%B9%3A-4\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E7%A7%BB%E8%A1%8C%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E3%82%A2%E3%83%89%E3%83%90%E3%82%A4%E3%82%B9%3A-4\">#</a> 移行のためのアドバイス:</h4><p>これらのライブラリはかなりミニマムで、その上に構築するのも簡単です。ただし、<code>&lt;MyComp/&gt;</code> は単なる HTMLElement（配列や関数）ではないことに注意してください。自分のものは JSX テンプレートの中に入れておくようにしましょう。ほとんどの場合、ホイスティングは機能しますが、これは HTMLElement のファクトリではなく、レンダリングライブラリであると考えるのがベストです。</p><h2 id=\"s.js\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#s.js\">#</a> S.js</h2><p>このライブラリは、Solid のリアクティブ設計に最も大きな影響を与えました。Solid は数年前から S.js を内部で使用していましたが、機能セットの違いから別々の道を歩むことになりました。S.js は、これまでで最も効率的なリアクティブライブラリの 1 つです。デジタル回路のように同期したタイムステップですべてをモデル化し、MobX のような複雑なメカニズムを多用することなく一貫性を確保しています。Solid のリアクティビティは、最終的には S と MobX のハイブリッドのようなものです。これにより、多くのリアクティブライブラリ（Knockout、MobX、Vue）よりも高いパフォーマンスが得られる一方で、開発者のメンタルモデルは簡単に保つことができます。最終的には S.js の方がリアクティブライブラリとしての性能は高いのですが、その差は最も過酷な合成ベンチマーク以外ではほとんど気になりません。</p><h2 id=\"rxjs\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#rxjs\">#</a> RxJS</h2><p>RxJS はリアクティブライブラリです。Solid は Observable データという似たようなアイデアを持っていますが、オブザーバーパターンのはるかに異なる応用を使用しています。Signal は Observable の単純なバージョンのようなものですが（次のものだけ）、自動的な依存関係検出のパターンは RxJS の 100 以上の演算子を凌駕しています。Solid もこのようなアプローチを取ることができましたし、実際に初期のバージョンのライブラリには同様の演算子が含まれていましたが、ほとんどの場合、計算で独自の変換ロジックを書く方が簡単です。Observable がコールドスタート、ユニキャスト、プッシュベースであるのに対し、クライアント上の多くの問題はホットスタート、マルチキャストであり、Solid のデフォルトの動作となります。</p><h2 id=\"others\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#others\">#</a> Others</h2><p>Angular や他のいくつかの人気のあるライブラリは、この比較では注目に値しません。これらのライブラリを使用した経験がないため、適切な比較ができないのです。一般的に、Solid は大規模なフレームワークとの共通点が少なく、正面から比較することは非常に困難です。</p></section><section class=\"mt-10\"><h1 id=\"faq\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#faq\">#</a> FAQ</h1><h3 id=\"1.-%E4%BB%AE%E6%83%B3-dom-%E3%81%AA%E3%81%97%E3%81%AE-jsx%EF%BC%9F-%E3%83%99%E3%83%BC%E3%83%91%E3%83%BC%E3%82%A6%E3%82%A7%E3%82%A2%EF%BC%88%E6%A6%82%E5%BF%B5%E3%81%A0%E3%81%91%E3%81%A7%E5%AE%9F%E6%85%8B%E3%81%AE%E3%81%AA%E3%81%84%E3%82%BD%E3%83%95%E3%83%88%EF%BC%89%E3%81%A7%E3%81%99%E3%81%8B%EF%BC%9F-%E4%BB%96%E3%81%AE%E3%83%95%E3%83%AC%E3%83%BC%E3%83%A0%E3%83%AF%E3%83%BC%E3%82%AF%E3%81%AE%E4%BD%9C%E8%80%85%E3%81%8C%E3%81%93%E3%82%8C%E3%81%AF%E4%B8%8D%E5%8F%AF%E8%83%BD%E3%81%A0%E3%81%A8%E8%A8%80%E3%81%A3%E3%81%A6%E3%81%84%E3%82%8B%E3%82%88%E3%81%86%E3%81%AA%E6%9C%89%E5%90%8D%E3%81%AA%E5%A3%B0%E3%82%92%E8%81%9E%E3%81%84%E3%81%9F%E3%81%93%E3%81%A8%E3%81%8C%E3%81%82%E3%82%8A%E3%81%BE%E3%81%99%E3%80%82\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#1.-%E4%BB%AE%E6%83%B3-dom-%E3%81%AA%E3%81%97%E3%81%AE-jsx%EF%BC%9F-%E3%83%99%E3%83%BC%E3%83%91%E3%83%BC%E3%82%A6%E3%82%A7%E3%82%A2%EF%BC%88%E6%A6%82%E5%BF%B5%E3%81%A0%E3%81%91%E3%81%A7%E5%AE%9F%E6%85%8B%E3%81%AE%E3%81%AA%E3%81%84%E3%82%BD%E3%83%95%E3%83%88%EF%BC%89%E3%81%A7%E3%81%99%E3%81%8B%EF%BC%9F-%E4%BB%96%E3%81%AE%E3%83%95%E3%83%AC%E3%83%BC%E3%83%A0%E3%83%AF%E3%83%BC%E3%82%AF%E3%81%AE%E4%BD%9C%E8%80%85%E3%81%8C%E3%81%93%E3%82%8C%E3%81%AF%E4%B8%8D%E5%8F%AF%E8%83%BD%E3%81%A0%E3%81%A8%E8%A8%80%E3%81%A3%E3%81%A6%E3%81%84%E3%82%8B%E3%82%88%E3%81%86%E3%81%AA%E6%9C%89%E5%90%8D%E3%81%AA%E5%A3%B0%E3%82%92%E8%81%9E%E3%81%84%E3%81%9F%E3%81%93%E3%81%A8%E3%81%8C%E3%81%82%E3%82%8A%E3%81%BE%E3%81%99%E3%80%82\">#</a> 1. 仮想 DOM なしの JSX？ ベーパーウェア（概念だけで実態のないソフト）ですか？ 他のフレームワークの作者がこれは不可能だと言っているような有名な声を聞いたことがあります。</h3><p>React の更新モデルを持っていなければ可能です。JSX は他のテンプレート DSL と同じです。特定の方法ではより柔軟性があります。任意の JavaScript を挿入するのは難しい場合もありますが、スプレッド演算子をサポートするのと変わりません。つまり、これはベーパーウェアではなく、最もパフォーマンスが高いことが証明されているアプローチなのです。</p><p>本当のメリットは、拡張性の高さにあります。コンパイラが最適なネイティブ DOM 更新を提供してくれますが、React のようなライブラリの自由度が高く、Render Props や Higher Order Components などのテクニックを使ったコンポーネントを、リアクティブな「フック」と一緒に書くことができます。Solid の制御フローがどのように機能するかが気に入らない？ 自分で書きましょう。</p><h3 id=\"2.-solid-%E3%81%A9%E3%82%8C%E3%81%BB%E3%81%A9%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9%E3%81%8C%E5%84%AA%E3%82%8C%E3%81%A6%E3%81%84%E3%81%BE%E3%81%99%E3%81%8B%EF%BC%9F\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#2.-solid-%E3%81%A9%E3%82%8C%E3%81%BB%E3%81%A9%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9%E3%81%8C%E5%84%AA%E3%82%8C%E3%81%A6%E3%81%84%E3%81%BE%E3%81%99%E3%81%8B%EF%BC%9F\">#</a> 2. Solid どれほどパフォーマンスが優れていますか？</h3><p>何か 1 つを挙げることができればいいのですが、実際には多くの重要な設計上の決定が組み合わされています。</p><ol> <li>明示的なリアクティビティにより、リアクティブであるべきものだけを追跡します。</li> <li>初期生成を考慮してコンパイルする。Solid はヒューリスティックな手法を用いて粒度を緩め、計算回数を減らす一方で、重要な更新は粒度とパフォーマンスを維持しています。</li> <li>リアクティブな式は単なる関数です。これにより、不要なラッパーや同期のオーバーヘッドを取り除いた遅延 props 評価による「消えるコンポーネント」が可能になります。</li> </ol><p>これらは現在のところ、Solid が競合に対して優位に立つための組み合わせであり、独特な技術です。</p><h3 id=\"3.-react-%E3%81%A8%E3%81%AE%E4%BA%92%E6%8F%9B%E6%80%A7%E3%81%AF%E3%81%82%E3%82%8A%E3%81%BE%E3%81%99%E3%81%8B%EF%BC%9F\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#3.-react-%E3%81%A8%E3%81%AE%E4%BA%92%E6%8F%9B%E6%80%A7%E3%81%AF%E3%81%82%E3%82%8A%E3%81%BE%E3%81%99%E3%81%8B%EF%BC%9F\">#</a> 3. React との互換性はありますか？</h3><p>いいえ、これからもならないでしょう。API は似ていて、コンポーネントは小さな編集で移動できることが多いのですが、更新モデルは根本的に異なります。React コンポーネントは何度もレンダリングされるため、Hooks 以外のコードは非常に異なって動作します。クロージャやフックのルールは不要なだけでなく、ここでは動作しない方法で使用できます。</p><p>一方で、Vue 互換は可能でしょう。現在のところ実装の予定はありませんが。</p><h3 id=\"4.-%E3%81%AA%E3%81%9C%E5%88%86%E5%89%B2%E4%BB%A3%E5%85%A5%E3%81%8C%E5%8B%95%E4%BD%9C%E3%81%97%E3%81%AA%E3%81%84%E3%81%AE%E3%81%A7%E3%81%99%E3%81%8B%EF%BC%9F-%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E5%85%A8%E4%BD%93%E3%82%92%E9%96%A2%E6%95%B0%E3%81%A7%E3%83%A9%E3%83%83%E3%83%97%E3%81%99%E3%82%8C%E3%81%B0%E8%A7%A3%E6%B1%BA%E3%81%A7%E3%81%8D%E3%82%8B%E3%81%93%E3%81%A8%E3%81%AB%E6%B0%97%E3%81%A5%E3%81%8D%E3%81%BE%E3%81%97%E3%81%9F%E3%80%82\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#4.-%E3%81%AA%E3%81%9C%E5%88%86%E5%89%B2%E4%BB%A3%E5%85%A5%E3%81%8C%E5%8B%95%E4%BD%9C%E3%81%97%E3%81%AA%E3%81%84%E3%81%AE%E3%81%A7%E3%81%99%E3%81%8B%EF%BC%9F-%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E5%85%A8%E4%BD%93%E3%82%92%E9%96%A2%E6%95%B0%E3%81%A7%E3%83%A9%E3%83%83%E3%83%97%E3%81%99%E3%82%8C%E3%81%B0%E8%A7%A3%E6%B1%BA%E3%81%A7%E3%81%8D%E3%82%8B%E3%81%93%E3%81%A8%E3%81%AB%E6%B0%97%E3%81%A5%E3%81%8D%E3%81%BE%E3%81%97%E3%81%9F%E3%80%82\">#</a> 4. なぜ分割代入が動作しないのですか？ コンポーネント全体を関数でラップすれば解決できることに気づきました。</h3><p>リアクティビティは Prop と Store オブジェクトのプロパティアクセスで発生します。バインディングやリアクティブな計算の外でそれらを参照しても追跡されません。これらの内部では分割代入は全く問題ありません。</p><p>しかし、コンポーネント全体を関数でラップすることは、無責任に行うべきではありません。Solid には仮想 DOM がありません。そのため、追跡された変更は、関数全体を再度実行し、すべてを再作成することになります。これはやめておきましょう。</p><h3 id=\"5.-%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E3%82%B5%E3%83%9D%E3%83%BC%E3%83%88%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%97%E3%81%A6%E3%81%8F%E3%82%8C%E3%81%BE%E3%81%99%E3%81%8B%EF%BC%9F-%E3%83%A9%E3%82%A4%E3%83%95%E3%82%B5%E3%82%A4%E3%82%AF%E3%83%AB%E3%81%AE%E6%96%B9%E3%81%8C%E6%8E%A8%E8%AB%96%E3%81%97%E3%82%84%E3%81%99%E3%81%84%E3%81%A8%E6%80%9D%E3%81%84%E3%81%BE%E3%81%99%E3%80%82\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#5.-%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E3%82%B5%E3%83%9D%E3%83%BC%E3%83%88%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%97%E3%81%A6%E3%81%8F%E3%82%8C%E3%81%BE%E3%81%99%E3%81%8B%EF%BC%9F-%E3%83%A9%E3%82%A4%E3%83%95%E3%82%B5%E3%82%A4%E3%82%AF%E3%83%AB%E3%81%AE%E6%96%B9%E3%81%8C%E6%8E%A8%E8%AB%96%E3%81%97%E3%82%84%E3%81%99%E3%81%84%E3%81%A8%E6%80%9D%E3%81%84%E3%81%BE%E3%81%99%E3%80%82\">#</a> 5. クラスコンポーネントのサポートを追加してくれますか？ ライフサイクルの方が推論しやすいと思います。</h3><p>クラスコンポーネントをサポートすることは意図していません。Solid のライフサイクルは、リアクティブシステムのスケジューリングに結びついており、人為的なものです。クラスを作ることはできますが、事実上、イベントハンドラ以外のコードは render 関数を含め、基本的にコンストラクタで実行されます。これは、データの粒度を小さくするための言い訳のための構文に過ぎません。</p><p>ライフサイクルではなく、データとその振る舞いをまとめてください。これは何十年にもわたって機能してきたリアクティブなベストプラクティスです。</p><h3 id=\"6.-%E7%A7%81%E3%81%AF-jsx-%E3%81%8C%E3%81%A8%E3%81%A6%E3%82%82%E5%AB%8C%E3%81%84%E3%81%AA%E3%81%AE%E3%81%A7%E3%81%99%E3%81%8C%E3%80%81%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88-dsl-%E3%81%AE%E5%8F%AF%E8%83%BD%E6%80%A7%E3%81%AF%E3%81%82%E3%82%8A%E3%81%BE%E3%81%99%E3%81%8B%EF%BC%9F-%E3%81%82%E3%80%81%E3%82%BF%E3%82%B0%E4%BB%98%E3%81%8D%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%83%AA%E3%83%86%E3%83%A9%E3%83%AB%2Fhyperscript-%E3%81%8C%E3%81%82%E3%82%8B%E3%82%93%E3%81%A7%E3%81%99%E3%81%AD%E3%80%82%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86%E3%81%8B%E3%81%AA%E2%80%A6%E2%80%A6%E3%80%82\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#6.-%E7%A7%81%E3%81%AF-jsx-%E3%81%8C%E3%81%A8%E3%81%A6%E3%82%82%E5%AB%8C%E3%81%84%E3%81%AA%E3%81%AE%E3%81%A7%E3%81%99%E3%81%8C%E3%80%81%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88-dsl-%E3%81%AE%E5%8F%AF%E8%83%BD%E6%80%A7%E3%81%AF%E3%81%82%E3%82%8A%E3%81%BE%E3%81%99%E3%81%8B%EF%BC%9F-%E3%81%82%E3%80%81%E3%82%BF%E3%82%B0%E4%BB%98%E3%81%8D%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%83%AA%E3%83%86%E3%83%A9%E3%83%AB%2Fhyperscript-%E3%81%8C%E3%81%82%E3%82%8B%E3%82%93%E3%81%A7%E3%81%99%E3%81%AD%E3%80%82%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86%E3%81%8B%E3%81%AA%E2%80%A6%E2%80%A6%E3%80%82\">#</a> 6. 私は JSX がとても嫌いなのですが、テンプレート DSL の可能性はありますか？ あ、タグ付きテンプレートリテラル/HyperScript があるんですね。使ってみようかな……。</h3><p>やめてください。ここでやめておきましょう。Svelte がテンプレートを使って最適化された DOM 命令を作成するのと同じように、私たちは JSX を使っています。タグ付きテンプレートリテラルや HyperScript のソリューションは、それ自体はとても素晴らしいものかもしれませんが、ビルド不可の要件のような現実的な理由がない限りあらゆる面で劣っています。バンドルが大きくなり、パフォーマンスが低下し、値のラップを手動で行う必要があります。</p><p>選択肢があるのは良いことですが、Solid の JSX はここでは本当に最適なソリューションです。テンプレート DSL も制限が多いとはいえ素晴らしいですが、JSX は無料で多くのことを提供してくれます。TypeScript、既存のパーサー、シンタックスハイライト、TypeScript、Prettier、コード補完、そして最後に欠かせないのが TypeScript です。</p><p>他のライブラリもこれらの機能のサポートを追加してきましたが、それは膨大な努力を必要とし、まだ不完全で、常にメンテナンスに頭を悩ませています。これは本当に現実的なスタンスを取っています。</p><h3 id=\"7.-signal-%E3%81%A8-store-%E3%81%AF%E3%81%A9%E3%81%AE%E3%82%88%E3%81%86%E3%81%AA%E5%A0%B4%E5%90%88%E3%81%AB%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B%E3%81%AE%E3%81%A7%E3%81%99%E3%81%8B%EF%BC%9F-%E3%81%AA%E3%81%9C%E3%81%93%E3%82%8C%E3%82%89%E3%81%AF%E9%81%95%E3%81%86%E3%81%AE%E3%81%A7%E3%81%99%E3%81%8B%EF%BC%9F\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#7.-signal-%E3%81%A8-store-%E3%81%AF%E3%81%A9%E3%81%AE%E3%82%88%E3%81%86%E3%81%AA%E5%A0%B4%E5%90%88%E3%81%AB%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B%E3%81%AE%E3%81%A7%E3%81%99%E3%81%8B%EF%BC%9F-%E3%81%AA%E3%81%9C%E3%81%93%E3%82%8C%E3%82%89%E3%81%AF%E9%81%95%E3%81%86%E3%81%AE%E3%81%A7%E3%81%99%E3%81%8B%EF%BC%9F\">#</a> 7. Signal と Store はどのような場合に使用するのですか？ なぜこれらは違うのですか？</h3><p>Store はネストされた値を自動的にラップするので、深いデータ構造やモデルのようなものに最適です。それ以外のほとんどの用途では、Signal は軽量で、素晴らしい働きをします。</p><p>これらを 1 つのものとしてまとめたいところですが、プリミティブをプロキシすることはできません。関数は最もシンプルなインターフェイスで、あらゆるリアクティブな式（状態のアクセスを含む）をトランスポート上で 1 つにまとめることができるため、ユニバーサルな API を提供します。Signal や状態に好きな名前をつけることができ、最小限の機能にとどめることができます。エンドユーザーに <code>.get()</code> <code>.set()</code> の入力を強要したり、さらに悪いことに <code>.value</code> の入力を強要したりすることは絶対に避けたいことです。少なくとも、前者は簡潔にするためにエイリアスを付けることができますが、後者は関数を呼び出すための最も簡潔な方法に過ぎません。</p><h3 id=\"8.-vue-%E3%81%AE%E3%82%88%E3%81%86%E3%81%AB-solid-%E3%81%AE-store-%E3%81%AB%E5%80%A4%E3%82%92%E5%89%B2%E3%82%8A%E5%BD%93%E3%81%A6%E3%82%8B%E3%81%93%E3%81%A8%E3%81%8C%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF%E3%81%AA%E3%81%9C%E3%81%A7%E3%81%99%E3%81%8B%E3%80%82-svelte%E3%80%81%E3%81%BE%E3%81%9F%E3%81%AF-mobx%EF%BC%9F-%E5%8F%8C%E6%96%B9%E5%90%91%E3%83%90%E3%82%A4%E3%83%B3%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0%E3%81%AF%E3%81%A9%E3%81%93%E3%81%AB%E3%81%82%E3%82%8A%E3%81%BE%E3%81%99%E3%81%8B%EF%BC%9F\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#8.-vue-%E3%81%AE%E3%82%88%E3%81%86%E3%81%AB-solid-%E3%81%AE-store-%E3%81%AB%E5%80%A4%E3%82%92%E5%89%B2%E3%82%8A%E5%BD%93%E3%81%A6%E3%82%8B%E3%81%93%E3%81%A8%E3%81%8C%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF%E3%81%AA%E3%81%9C%E3%81%A7%E3%81%99%E3%81%8B%E3%80%82-svelte%E3%80%81%E3%81%BE%E3%81%9F%E3%81%AF-mobx%EF%BC%9F-%E5%8F%8C%E6%96%B9%E5%90%91%E3%83%90%E3%82%A4%E3%83%B3%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0%E3%81%AF%E3%81%A9%E3%81%93%E3%81%AB%E3%81%82%E3%82%8A%E3%81%BE%E3%81%99%E3%81%8B%EF%BC%9F\">#</a> 8. Vue のように Solid の Store に値を割り当てることができないのはなぜですか。 Svelte、または MobX？ 双方向バインディングはどこにありますか？</h3><p>リアクティビティは強力なツールですが、同時に危険なツールでもあります。MobX はこのことを理解していて、Strict モードと Actions を導入して、更新が発生する場所や時間を制限しています。データのコンポーネントツリー全体を扱う Solid では、React から何かを学べることが明らかになりました。同じ契約を持つための手段を提供する限り、実際に不変である必要はありません。</p><p>状態を更新する能力を渡せるかどうかは、状態を渡すかどうかを決めるよりも間違いなく重要です。だから、それを分離できることは重要であり、読み取りが不変である場合にのみ可能です。また、細かく更新できるのであれば、不変性のコストを払う必要はありません。幸いなことに、ImmutableJS と Immer の間には大量の先行技術があります。皮肉なことに、Solid は可変の内部と不変のインターフェイスを持つ逆 Immer のように振る舞います。</p><h3 id=\"9.-solid-%E3%81%AE%E3%83%AA%E3%82%A2%E3%82%AF%E3%83%86%E3%82%A3%E3%83%93%E3%83%86%E3%82%A3%E3%82%92%E5%8D%98%E4%BD%93%E3%81%A7%E4%BD%BF%E3%81%86%E3%81%93%E3%81%A8%E3%81%AF%E3%81%A7%E3%81%8D%E3%81%BE%E3%81%99%E3%81%8B%EF%BC%9F\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#9.-solid-%E3%81%AE%E3%83%AA%E3%82%A2%E3%82%AF%E3%83%86%E3%82%A3%E3%83%93%E3%83%86%E3%82%A3%E3%82%92%E5%8D%98%E4%BD%93%E3%81%A7%E4%BD%BF%E3%81%86%E3%81%93%E3%81%A8%E3%81%AF%E3%81%A7%E3%81%8D%E3%81%BE%E3%81%99%E3%81%8B%EF%BC%9F\">#</a> 9. Solid のリアクティビティを単体で使うことはできますか？</h3><p>もちろんです。単体のパッケージは提供していませんが、コンパイラなしの Solid をインストールし、リアクティブプリミティブを使用することは簡単です。きめ細かいリアクティビティの利点の 1 つは、ライブラリに依存しないことです。それどころか、ほとんどすべてのリアクティブライブラリがこの方法で動作します。それが <a href=\"https://github.com/solidjs/solid\">Solid</a> に影響を与えたものであり、その基礎となる <a href=\"https://github.com/ryansolid/dom-expressions\">DOM Expressions library</a> が純粋にリアクティブシステムからレンダラーを作るきっかけとなりました。</p><p>試しにいくつか挙げてみましょう: <a href=\"https://github.com/solidjs/solid\">Solid</a>、<a href=\"https://github.com/mobxjs/mobx\">MobX</a>、<a href=\"https://github.com/knockout/knockout\">Knockout</a>、<a href=\"https://github.com/sveltejs/svelte\">Svelte</a>、<a href=\"https://github.com/adamhaile/S\">S.js</a>、<a href=\"https://github.com/Riim/cellx\">CellX</a>、<a href=\"https://github.com/ds300/derivablejs\">Derivable</a>、<a href=\"https://github.com/luwes/sinuous\">Sinuous</a>、そして最近では <a href=\"https://github.com/vuejs/vue\">Vue</a> などです。リアクティブなライブラリを作るには、例えば <a href=\"https://github.com/Polymer/lit-html\">lit-html</a> のようにレンダラーにタグ付けするよりもはるかに多くのことが必要ですが、感触をつかむには良い方法です。</p><h3 id=\"10.-solid-%E3%81%AB%E3%81%AF%E3%80%81next.js-%E3%82%84-material-components-%E3%81%AE%E3%82%88%E3%81%86%E3%81%AA%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%81%AF%E3%81%82%E3%82%8A%E3%81%BE%E3%81%99%E3%81%8B%EF%BC%9F\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#10.-solid-%E3%81%AB%E3%81%AF%E3%80%81next.js-%E3%82%84-material-components-%E3%81%AE%E3%82%88%E3%81%86%E3%81%AA%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%81%AF%E3%81%82%E3%82%8A%E3%81%BE%E3%81%99%E3%81%8B%EF%BC%9F\">#</a> 10. Solid には、Next.js や Material Components のようなライブラリはありますか？</h3><p>私たちの知る限りありません。もしライブラリ構築に興味があれば、<a href=\"https://discord.com/invite/solidjs\">Discord</a> ですぐに構築のお手伝いをいたします。基本的なものは揃っているので、あとはそれをベースにしていくだけです。</p></section>"
}